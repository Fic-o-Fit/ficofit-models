{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Capstone - Push Up Detector (MoveNet, 1st method) 🐲","provenance":[{"file_id":"1J8E2UZoWUZcd5mp6brqSD_-gpqaWonMa","timestamp":1651865637744}],"collapsed_sections":[],"mount_file_id":"1J8E2UZoWUZcd5mp6brqSD_-gpqaWonMa","authorship_tag":"ABX9TyOo7eHr0CE4DQ4aXSysKN8C"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 💪🏽**Push Up Detector**💦✨\n","This model is designed to detect push up activity that consists of the up and down movement. The dataset will be in the form of stationary pose landmarks. One push up will be counted if the model detected several constant and continuous push up 'Up' pose followed by several constant and continuous push up 'Down' pose.\n","\n","This notebook is presented to you by Bangkit Team C22-PS072's ML Squad💖:\n","\n","\n","*   Deandra Setyaputri - M2010F1120\n","*   Wilma Elysia - M7013F1348\n","\n"],"metadata":{"id":"3YSzRfpc5NnJ"}},{"cell_type":"markdown","source":["## 0. Manage Dependencies"],"metadata":{"id":"tiI0kJBbwui0"}},{"cell_type":"code","source":["!pip install tensorflow tensorflow-gpu opencv-python matplotlib sklearn"],"metadata":{"id":"KZVy7KhvXSAN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653761799956,"user_tz":-420,"elapsed":129739,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"f755724e-eb09-4fd5-f27b-77c06584f5a6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.7/dist-packages (2.8.0+zzzcolab20220506162203)\n","Collecting tensorflow-gpu\n","  Downloading tensorflow_gpu-2.9.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (511.7 MB)\n","\u001b[K     |████████████████████████████████| 511.7 MB 6.1 kB/s \n","\u001b[?25hRequirement already satisfied: opencv-python in /usr/local/lib/python3.7/dist-packages (4.1.2.30)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (3.2.2)\n","Requirement already satisfied: sklearn in /usr/local/lib/python3.7/dist-packages (0.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.1.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from tensorflow) (57.4.0)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.15.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.46.1)\n","Requirement already satisfied: absl-py>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.0.0)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.14.1)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: libclang>=9.0.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (14.0.1)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (4.2.0)\n","Requirement already satisfied: tensorboard<2.9,>=2.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.8.0)\n","Requirement already satisfied: keras<2.9,>=2.8.0rc0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.8.0)\n","Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.21.6)\n","Collecting tf-estimator-nightly==2.8.0.dev2021122109\n","  Downloading tf_estimator_nightly-2.8.0.dev2021122109-py2.py3-none-any.whl (462 kB)\n","\u001b[K     |████████████████████████████████| 462 kB 60.3 MB/s \n","\u001b[?25hRequirement already satisfied: flatbuffers>=1.12 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.0)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (3.1.0)\n","Requirement already satisfied: protobuf>=3.9.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (3.17.3)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: gast>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (0.5.3)\n","Requirement already satisfied: keras-preprocessing>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.1.2)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (0.26.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.7/dist-packages (from astunparse>=1.6.0->tensorflow) (0.37.1)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py>=2.9.0->tensorflow) (1.5.2)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (1.0.1)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (1.35.0)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (1.8.1)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (2.23.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (3.3.7)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (0.6.1)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (0.4.6)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (4.8)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (0.2.8)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (4.2.4)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow) (1.3.1)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard<2.9,>=2.8->tensorflow) (4.11.3)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.9,>=2.8->tensorflow) (3.8.0)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (0.4.8)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (2022.5.18.1)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (3.0.4)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow) (3.2.0)\n","Collecting tensorflow-gpu\n","  Downloading tensorflow_gpu-2.9.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (511.7 MB)\n","\u001b[K     |████████████████████████████████| 511.7 MB 4.6 kB/s \n","\u001b[?25h  Downloading tensorflow_gpu-2.8.2-cp37-cp37m-manylinux2010_x86_64.whl (497.9 MB)\n","\u001b[K     |████████████████████████████████| 497.9 MB 16 kB/s \n","\u001b[?25hRequirement already satisfied: tensorflow-estimator<2.9,>=2.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu) (2.8.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (0.11.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (3.0.9)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (1.4.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from sklearn) (1.0.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->sklearn) (3.1.0)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->sklearn) (1.4.1)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->sklearn) (1.1.0)\n","Installing collected packages: tf-estimator-nightly, tensorflow-gpu\n","Successfully installed tensorflow-gpu-2.8.2 tf-estimator-nightly-2.8.0.dev2021122109\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","import glob\n","import cv2\n","import os\n","import enum\n","import tensorflow as tf\n","from tensorflow import keras"],"metadata":{"id":"hQly5z6WydbC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 1. Preprocess Input Images\n","First, create a copy of every image data where they are flipped horizontally so that the model can accurately detect push-up poses regardless if the user is facing left or right."],"metadata":{"id":"dspDqEBd_Vq6"}},{"cell_type":"code","source":["from google.colab import drive\n","\n","drive.mount(\"/content/drive\") \n","root = \"/content/drive/My Drive/CAPSTONE/Datasets/\"\n","\n","pushup_up_folder = root + \"pushup/pushup_up\" + \"/*.*\"\n","pushup_down_folder = root + \"pushup/pushup_down\" + \"/*.*\"\n","movenet_folder = \"/content/drive/My Drive/CAPSTONE/Models/lite-model_movenet_singlepose_lightning_3.tflite\""],"metadata":{"id":"qNz5rgwh_eZT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653761826869,"user_tz":-420,"elapsed":23511,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"29513a69-fbe7-465c-aca8-cfed6cb523a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# def flip_img_folder(folder):\n","#     for file in glob.glob(folder):\n","#         image = cv2.imread(file)\n","#         flipped_img_path = file[:-4] + \"-reversed.\" + file[-3:]\n","#         # file[:-4] is the name of the path and image name without the .jpg or .png extension\n","\n","#         if(file[-13:-4] != \"-reversed\" and os.path.exists(flipped_img_path) == False):\n","#             flipped_img = cv2.flip(image, 1)\n","#             cv2.imwrite(flipped_img_path, flipped_img)"],"metadata":{"id":"WmgnqaZxEKga"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# flip_img_folder(pushup_up_folder)\n","# flip_img_folder(pushup_down_folder)"],"metadata":{"id":"t5R58Me4PnZm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["We will convert all the image data to arrays of landmarks representing the human pose in each image. Then create a csv file containing those data to be used in training later."],"metadata":{"id":"tV_qwPJfD9qX"}},{"cell_type":"code","source":["interpreter = tf.lite.Interpreter(model_path=movenet_folder)\n","interpreter.allocate_tensors()"],"metadata":{"id":"gPZK5IHId-ot"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def processPose(image):\n","    img = tf.image.resize_with_pad(np.expand_dims(image, axis=0), 192,192)\n","    img = tf.cast(img, dtype=tf.float32)\n","    input_details = interpreter.get_input_details()\n","    output_details = interpreter.get_output_details()\n","    interpreter.set_tensor(input_details[0]['index'], np.array(img))\n","    # Invoke inference.\n","    interpreter.invoke()\n","    # Get the model prediction.\n","    keypoints_with_scores = interpreter.get_tensor(output_details[0]['index'])\n","    keypoints = keypoints_with_scores.flatten().reshape(17,3)\n","    fixed_keypoints = []\n","    for [x, y, score] in keypoints:\n","        if score < 0.2:\n","            fixed_keypoints.append([0, 0, 0])\n","        else:\n","            fixed_keypoints.append([x, y, score])\n","    return np.array(fixed_keypoints)"],"metadata":{"id":"tAnE2ZRkYdVn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Trying out the process"],"metadata":{"id":"Z-tsIhlPBKBy"}},{"cell_type":"code","source":["# # trying out the mechanism\n","# for file in glob.glob(pushup_up_folder):\n","#     img = cv2.imread(file)\n","#     keypoints = processPose(img).flatten().reshape(17, 3)\n","    \n","#     break\n","# img = cv2.imread('/content/800px-A_black_image.jpg')\n","# keypoints = processPose(img).flatten().reshape(17, 3)\n","# fixed_keypoints = []\n","# for [x, y, score] in keypoints:\n","#     if score < 0.2:\n","#         fixed_keypoints.append([0, 0, 0])\n","#     else:\n","#         fixed_keypoints.append([x, y, score])\n","# print(fixed_keypoints)\n","#     # landmarks = np.array([[res.x, res.y, res.z, res.visibility] for res in results.pose_world_landmarks.landmark]).flatten()\n","#     # print(landmarks)"],"metadata":{"id":"2770Ruv2SKiD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Enum and Function Definitions"],"metadata":{"id":"BcXYidhjBj5Q"}},{"cell_type":"code","source":["# Source: the Movenet TFLite Documentation\n","class BodyPart(enum.Enum):\n","  \"\"\"Enum representing human body keypoints detected by pose estimation models.\"\"\"\n","  NOSE = 0\n","  LEFT_EYE = 1\n","  RIGHT_EYE = 2\n","  LEFT_EAR = 3\n","  RIGHT_EAR = 4\n","  LEFT_SHOULDER = 5\n","  RIGHT_SHOULDER = 6\n","  LEFT_ELBOW = 7\n","  RIGHT_ELBOW = 8\n","  LEFT_WRIST = 9\n","  RIGHT_WRIST = 10\n","  LEFT_HIP = 11\n","  RIGHT_HIP = 12\n","  LEFT_KNEE = 13\n","  RIGHT_KNEE = 14\n","  LEFT_ANKLE = 15\n","  RIGHT_ANKLE = 16"],"metadata":{"id":"Nmph4npajY0U"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HgQMdfeT65Z5"},"outputs":[],"source":["# These are a set of functions to preprocess the input data before classification\n","# Source: the Movenet TFLite Documentation\n","\n","def get_center_point(landmarks, left_bodypart, right_bodypart):\n","  \"\"\"Calculates the center point of the two given landmarks.\"\"\"\n","\n","  left = tf.gather(landmarks, left_bodypart.value, axis=1)\n","  right = tf.gather(landmarks, right_bodypart.value, axis=1)\n","  center = left * 0.5 + right * 0.5\n","  return center\n","\n","\n","def get_pose_size(landmarks, torso_size_multiplier=2.5):\n","  \"\"\"Calculates pose size.\n","\n","  It is the maximum of two values:\n","    * Torso size multiplied by `torso_size_multiplier`\n","    * Maximum distance from pose center to any pose landmark\n","  \"\"\"\n","  # Hips center\n","  hips_center = get_center_point(landmarks, BodyPart.LEFT_HIP, \n","                                 BodyPart.RIGHT_HIP)\n","\n","  # Shoulders center\n","  shoulders_center = get_center_point(landmarks, BodyPart.LEFT_SHOULDER,\n","                                      BodyPart.RIGHT_SHOULDER)\n","\n","  # Torso size as the minimum body size\n","  torso_size = tf.linalg.norm(shoulders_center - hips_center)\n","\n","  # Pose center\n","  pose_center_new = get_center_point(landmarks, BodyPart.LEFT_HIP, \n","                                     BodyPart.RIGHT_HIP)\n","  pose_center_new = tf.expand_dims(pose_center_new, axis=1)\n","  # Broadcast the pose center to the same size as the landmark vector to\n","  # perform substraction\n","  pose_center_new = tf.broadcast_to(pose_center_new,\n","                                    [tf.size(landmarks) // (17*2), 17, 2])\n","\n","  # Dist to pose center\n","  d = tf.gather(landmarks - pose_center_new, 0, axis=0,\n","                name=\"dist_to_pose_center\")\n","  # Max dist to pose center\n","  max_dist = tf.reduce_max(tf.linalg.norm(d, axis=0))\n","\n","  # Normalize scale\n","  pose_size = tf.maximum(torso_size * torso_size_multiplier, max_dist)\n","\n","  return pose_size\n","\n","\n","def normalize_pose_landmarks(landmarks):\n","  \"\"\"Normalizes the landmarks translation by moving the pose center to (0,0) and\n","  scaling it to a constant pose size.\n","  \"\"\"\n","  # Move landmarks so that the pose center becomes (0,0)\n","  pose_center = get_center_point(landmarks, BodyPart.LEFT_HIP, \n","                                 BodyPart.RIGHT_HIP)\n","  pose_center = tf.expand_dims(pose_center, axis=1)\n","  # Broadcast the pose center to the same size as the landmark vector to perform\n","  # substraction\n","  pose_center = tf.broadcast_to(pose_center, \n","                                [tf.size(landmarks) // (17*2), 17, 2])\n","  landmarks = landmarks - pose_center\n","\n","  # Scale the landmarks to a constant pose size\n","  pose_size = get_pose_size(landmarks)\n","  landmarks /= pose_size\n","\n","  return landmarks\n","\n","\n","def landmarks_to_embedding(landmarks_and_scores):\n","  \"\"\"Converts the input landmarks into a pose embedding.\"\"\"\n","  # Reshape the flat input into a matrix with shape=(17, 3)\n","  reshaped_inputs = keras.layers.Reshape((17, 3))(landmarks_and_scores)\n","\n","  # Normalize landmarks 2D\n","  landmarks = normalize_pose_landmarks(reshaped_inputs[:, :, :2])\n","\n","  # Flatten the normalized landmark coordinates into a vector\n","  embedding = keras.layers.Flatten()(landmarks)\n","\n","  return embedding"]},{"cell_type":"markdown","source":["## 2. Create Dataset"],"metadata":{"id":"Pla4feGBBxwl"}},{"cell_type":"code","source":["def detect_pose_from_folder(folder, folder_label):\n","    landmarks = []\n","    labels = []\n","    for file in glob.glob(folder):\n","        image = cv2.imread(file)\n","        keypoints = processPose(image).flatten()\n","        if len(keypoints)!=0:\n","            landmarks.append(keypoints)\n","            labels.append(folder_label)\n","    return landmarks, labels"],"metadata":{"id":"9EXF5IfUhpG8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# '1' is the label for the pushup up movement\n","pushup_up_landmarks, pushup_up_labels = detect_pose_from_folder(pushup_up_folder, 1)\n","pushup_down_landmarks, pushup_down_labels = detect_pose_from_folder(pushup_down_folder, 0)"],"metadata":{"id":"FpKtOMcMZle5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["landmarks = pushup_up_landmarks + pushup_down_landmarks\n","labels = pushup_up_labels + pushup_down_labels"],"metadata":{"id":"B4lovPOAevDy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(len(landmarks))\n","print(len(labels))"],"metadata":{"id":"1jh-UB9tg9uz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import random\n","\n","X = np.array(landmarks)\n","y = np.array(labels)\n","dataset = [(X[i], y[i]) for i in range(0, len(labels))]\n","random.shuffle(dataset)\n","X.shape"],"metadata":{"id":"RCrpQ0hbqs6Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import csv\n","\n","# open the file in the write mode\n","with open('/content/drive/My Drive/CAPSTONE/Datasets/pushup/pushup_dataset_movenet', 'w') as f:\n","    # create the csv writer\n","    writer = csv.writer(f)\n","\n","    # write the header to the csv file\n","    writer.writerow(['pushup_pose', 'pose_landmarks'])\n","\n","    for landmark, label in dataset:\n","        writer.writerow([label, landmark])"],"metadata":{"id":"tgqCaUGSa5nv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 3. Train Model"],"metadata":{"id":"SCvb0Duits5j"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"1Pte6b1bgWKv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653761867427,"user_tz":-420,"elapsed":1187,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"23663695-ba0e-407b-901a-1ca0588d166b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"pushupdetector\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_1 (InputLayer)           [(None, 51)]         0           []                               \n","                                                                                                  \n"," reshape (Reshape)              (None, 17, 3)        0           ['input_1[0][0]']                \n","                                                                                                  \n"," tf.__operators__.getitem (Slic  (None, 17, 2)       0           ['reshape[0][0]']                \n"," ingOpLambda)                                                                                     \n","                                                                                                  \n"," tf.compat.v1.gather (TFOpLambd  (None, 2)           0           ['tf.__operators__.getitem[0][0]'\n"," a)                                                              ]                                \n","                                                                                                  \n"," tf.compat.v1.gather_1 (TFOpLam  (None, 2)           0           ['tf.__operators__.getitem[0][0]'\n"," bda)                                                            ]                                \n","                                                                                                  \n"," tf.math.multiply (TFOpLambda)  (None, 2)            0           ['tf.compat.v1.gather[0][0]']    \n","                                                                                                  \n"," tf.math.multiply_1 (TFOpLambda  (None, 2)           0           ['tf.compat.v1.gather_1[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," tf.__operators__.add (TFOpLamb  (None, 2)           0           ['tf.math.multiply[0][0]',       \n"," da)                                                              'tf.math.multiply_1[0][0]']     \n","                                                                                                  \n"," tf.compat.v1.size (TFOpLambda)  ()                  0           ['tf.__operators__.getitem[0][0]'\n","                                                                 ]                                \n","                                                                                                  \n"," tf.expand_dims (TFOpLambda)    (None, 1, 2)         0           ['tf.__operators__.add[0][0]']   \n","                                                                                                  \n"," tf.compat.v1.floor_div (TFOpLa  ()                  0           ['tf.compat.v1.size[0][0]']      \n"," mbda)                                                                                            \n","                                                                                                  \n"," tf.broadcast_to (TFOpLambda)   (None, 17, 2)        0           ['tf.expand_dims[0][0]',         \n","                                                                  'tf.compat.v1.floor_div[0][0]'] \n","                                                                                                  \n"," tf.math.subtract (TFOpLambda)  (None, 17, 2)        0           ['tf.__operators__.getitem[0][0]'\n","                                                                 , 'tf.broadcast_to[0][0]']       \n","                                                                                                  \n"," tf.compat.v1.gather_6 (TFOpLam  (None, 2)           0           ['tf.math.subtract[0][0]']       \n"," bda)                                                                                             \n","                                                                                                  \n"," tf.compat.v1.gather_7 (TFOpLam  (None, 2)           0           ['tf.math.subtract[0][0]']       \n"," bda)                                                                                             \n","                                                                                                  \n"," tf.math.multiply_6 (TFOpLambda  (None, 2)           0           ['tf.compat.v1.gather_6[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," tf.math.multiply_7 (TFOpLambda  (None, 2)           0           ['tf.compat.v1.gather_7[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," tf.__operators__.add_3 (TFOpLa  (None, 2)           0           ['tf.math.multiply_6[0][0]',     \n"," mbda)                                                            'tf.math.multiply_7[0][0]']     \n","                                                                                                  \n"," tf.compat.v1.size_1 (TFOpLambd  ()                  0           ['tf.math.subtract[0][0]']       \n"," a)                                                                                               \n","                                                                                                  \n"," tf.compat.v1.gather_4 (TFOpLam  (None, 2)           0           ['tf.math.subtract[0][0]']       \n"," bda)                                                                                             \n","                                                                                                  \n"," tf.compat.v1.gather_5 (TFOpLam  (None, 2)           0           ['tf.math.subtract[0][0]']       \n"," bda)                                                                                             \n","                                                                                                  \n"," tf.compat.v1.gather_2 (TFOpLam  (None, 2)           0           ['tf.math.subtract[0][0]']       \n"," bda)                                                                                             \n","                                                                                                  \n"," tf.compat.v1.gather_3 (TFOpLam  (None, 2)           0           ['tf.math.subtract[0][0]']       \n"," bda)                                                                                             \n","                                                                                                  \n"," tf.expand_dims_1 (TFOpLambda)  (None, 1, 2)         0           ['tf.__operators__.add_3[0][0]'] \n","                                                                                                  \n"," tf.compat.v1.floor_div_1 (TFOp  ()                  0           ['tf.compat.v1.size_1[0][0]']    \n"," Lambda)                                                                                          \n","                                                                                                  \n"," tf.math.multiply_4 (TFOpLambda  (None, 2)           0           ['tf.compat.v1.gather_4[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," tf.math.multiply_5 (TFOpLambda  (None, 2)           0           ['tf.compat.v1.gather_5[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," tf.math.multiply_2 (TFOpLambda  (None, 2)           0           ['tf.compat.v1.gather_2[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," tf.math.multiply_3 (TFOpLambda  (None, 2)           0           ['tf.compat.v1.gather_3[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," tf.broadcast_to_1 (TFOpLambda)  (None, 17, 2)       0           ['tf.expand_dims_1[0][0]',       \n","                                                                  'tf.compat.v1.floor_div_1[0][0]'\n","                                                                 ]                                \n","                                                                                                  \n"," tf.__operators__.add_2 (TFOpLa  (None, 2)           0           ['tf.math.multiply_4[0][0]',     \n"," mbda)                                                            'tf.math.multiply_5[0][0]']     \n","                                                                                                  \n"," tf.__operators__.add_1 (TFOpLa  (None, 2)           0           ['tf.math.multiply_2[0][0]',     \n"," mbda)                                                            'tf.math.multiply_3[0][0]']     \n","                                                                                                  \n"," tf.math.subtract_2 (TFOpLambda  (None, 17, 2)       0           ['tf.math.subtract[0][0]',       \n"," )                                                                'tf.broadcast_to_1[0][0]']      \n","                                                                                                  \n"," tf.math.subtract_1 (TFOpLambda  (None, 2)           0           ['tf.__operators__.add_2[0][0]', \n"," )                                                                'tf.__operators__.add_1[0][0]'] \n","                                                                                                  \n"," tf.compat.v1.gather_8 (TFOpLam  (17, 2)             0           ['tf.math.subtract_2[0][0]']     \n"," bda)                                                                                             \n","                                                                                                  \n"," tf.compat.v1.norm (TFOpLambda)  ()                  0           ['tf.math.subtract_1[0][0]']     \n","                                                                                                  \n"," tf.compat.v1.norm_1 (TFOpLambd  (2,)                0           ['tf.compat.v1.gather_8[0][0]']  \n"," a)                                                                                               \n","                                                                                                  \n"," tf.math.multiply_8 (TFOpLambda  ()                  0           ['tf.compat.v1.norm[0][0]']      \n"," )                                                                                                \n","                                                                                                  \n"," tf.math.reduce_max (TFOpLambda  ()                  0           ['tf.compat.v1.norm_1[0][0]']    \n"," )                                                                                                \n","                                                                                                  \n"," tf.math.maximum (TFOpLambda)   ()                   0           ['tf.math.multiply_8[0][0]',     \n","                                                                  'tf.math.reduce_max[0][0]']     \n","                                                                                                  \n"," tf.math.truediv (TFOpLambda)   (None, 17, 2)        0           ['tf.math.subtract[0][0]',       \n","                                                                  'tf.math.maximum[0][0]']        \n","                                                                                                  \n"," flatten (Flatten)              (None, 34)           0           ['tf.math.truediv[0][0]']        \n","                                                                                                  \n"," dense (Dense)                  (None, 128)          4480        ['flatten[0][0]']                \n","                                                                                                  \n"," dropout (Dropout)              (None, 128)          0           ['dense[0][0]']                  \n","                                                                                                  \n"," dense_1 (Dense)                (None, 64)           8256        ['dropout[0][0]']                \n","                                                                                                  \n"," dropout_1 (Dropout)            (None, 64)           0           ['dense_1[0][0]']                \n","                                                                                                  \n"," dense_2 (Dense)                (None, 2)            130         ['dropout_1[0][0]']              \n","                                                                                                  \n","==================================================================================================\n","Total params: 12,866\n","Trainable params: 12,866\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"]}],"source":["# Define the model\n","inputs = tf.keras.Input(shape=(51))  # from 17*3\n","embedding = landmarks_to_embedding(inputs)\n","\n","layer = keras.layers.Dense(128, activation=tf.nn.relu6)(embedding)\n","layer = keras.layers.Dropout(0.5)(layer)\n","layer = keras.layers.Dense(64, activation=tf.nn.relu6)(layer)\n","layer = keras.layers.Dropout(0.5)(layer)\n","outputs = keras.layers.Dense(2, activation=\"softmax\")(layer)\n","\n","model = keras.Model(inputs, outputs, name=\"pushupdetector\")\n","model.summary()"]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n","X_test, X_val, y_test, y_val = train_test_split(X_test, y_test, test_size=0.5)"],"metadata":{"id":"kdtSr2kPwoEr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.compile(\n","    optimizer='adam',\n","    loss='sparse_categorical_crossentropy',\n","    metrics=['accuracy']\n",")\n","\n","history = model.fit(X_train, y_train,\n","                    epochs=200,\n","                    batch_size=16,\n","                    validation_data=(X_val, y_val))"],"metadata":{"id":"K8I9vzbs2uC9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653761896306,"user_tz":-420,"elapsed":28915,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"94277dc7-0966-4714-e768-b301884a00ce"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/200\n","41/41 [==============================] - 1s 9ms/step - loss: 0.6344 - accuracy: 0.6656 - val_loss: 0.5527 - val_accuracy: 0.7319\n","Epoch 2/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.4999 - accuracy: 0.7496 - val_loss: 0.4190 - val_accuracy: 0.7826\n","Epoch 3/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.4117 - accuracy: 0.8445 - val_loss: 0.3228 - val_accuracy: 0.8768\n","Epoch 4/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.3395 - accuracy: 0.8942 - val_loss: 0.2632 - val_accuracy: 0.8913\n","Epoch 5/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.2969 - accuracy: 0.8911 - val_loss: 0.2151 - val_accuracy: 0.9203\n","Epoch 6/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.2621 - accuracy: 0.9036 - val_loss: 0.1823 - val_accuracy: 0.9275\n","Epoch 7/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.2611 - accuracy: 0.9098 - val_loss: 0.1728 - val_accuracy: 0.9203\n","Epoch 8/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.2281 - accuracy: 0.9129 - val_loss: 0.1685 - val_accuracy: 0.9275\n","Epoch 9/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.2219 - accuracy: 0.9176 - val_loss: 0.1703 - val_accuracy: 0.9203\n","Epoch 10/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.2166 - accuracy: 0.9207 - val_loss: 0.1536 - val_accuracy: 0.9348\n","Epoch 11/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1987 - accuracy: 0.9487 - val_loss: 0.1413 - val_accuracy: 0.9275\n","Epoch 12/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.2104 - accuracy: 0.9285 - val_loss: 0.1397 - val_accuracy: 0.9348\n","Epoch 13/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.2086 - accuracy: 0.9222 - val_loss: 0.1269 - val_accuracy: 0.9565\n","Epoch 14/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1855 - accuracy: 0.9425 - val_loss: 0.1279 - val_accuracy: 0.9420\n","Epoch 15/200\n","41/41 [==============================] - 0s 4ms/step - loss: 0.1719 - accuracy: 0.9378 - val_loss: 0.1224 - val_accuracy: 0.9565\n","Epoch 16/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1629 - accuracy: 0.9425 - val_loss: 0.1149 - val_accuracy: 0.9638\n","Epoch 17/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1680 - accuracy: 0.9409 - val_loss: 0.1284 - val_accuracy: 0.9348\n","Epoch 18/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1642 - accuracy: 0.9425 - val_loss: 0.1064 - val_accuracy: 0.9783\n","Epoch 19/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1634 - accuracy: 0.9487 - val_loss: 0.1105 - val_accuracy: 0.9638\n","Epoch 20/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1520 - accuracy: 0.9471 - val_loss: 0.1037 - val_accuracy: 0.9710\n","Epoch 21/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1697 - accuracy: 0.9425 - val_loss: 0.1215 - val_accuracy: 0.9783\n","Epoch 22/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1426 - accuracy: 0.9518 - val_loss: 0.1083 - val_accuracy: 0.9710\n","Epoch 23/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1571 - accuracy: 0.9518 - val_loss: 0.0948 - val_accuracy: 0.9710\n","Epoch 24/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1483 - accuracy: 0.9533 - val_loss: 0.0982 - val_accuracy: 0.9783\n","Epoch 25/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1437 - accuracy: 0.9393 - val_loss: 0.1242 - val_accuracy: 0.9638\n","Epoch 26/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1544 - accuracy: 0.9425 - val_loss: 0.1027 - val_accuracy: 0.9638\n","Epoch 27/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1449 - accuracy: 0.9502 - val_loss: 0.1011 - val_accuracy: 0.9710\n","Epoch 28/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1360 - accuracy: 0.9518 - val_loss: 0.1020 - val_accuracy: 0.9710\n","Epoch 29/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1421 - accuracy: 0.9502 - val_loss: 0.1006 - val_accuracy: 0.9638\n","Epoch 30/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1208 - accuracy: 0.9533 - val_loss: 0.0924 - val_accuracy: 0.9710\n","Epoch 31/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1228 - accuracy: 0.9518 - val_loss: 0.1025 - val_accuracy: 0.9565\n","Epoch 32/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1295 - accuracy: 0.9580 - val_loss: 0.0954 - val_accuracy: 0.9638\n","Epoch 33/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1184 - accuracy: 0.9611 - val_loss: 0.0920 - val_accuracy: 0.9710\n","Epoch 34/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1232 - accuracy: 0.9596 - val_loss: 0.0918 - val_accuracy: 0.9855\n","Epoch 35/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1106 - accuracy: 0.9596 - val_loss: 0.0997 - val_accuracy: 0.9565\n","Epoch 36/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1202 - accuracy: 0.9549 - val_loss: 0.0857 - val_accuracy: 0.9855\n","Epoch 37/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1205 - accuracy: 0.9580 - val_loss: 0.0887 - val_accuracy: 0.9783\n","Epoch 38/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1089 - accuracy: 0.9720 - val_loss: 0.0945 - val_accuracy: 0.9710\n","Epoch 39/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1177 - accuracy: 0.9596 - val_loss: 0.0926 - val_accuracy: 0.9710\n","Epoch 40/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1003 - accuracy: 0.9658 - val_loss: 0.0897 - val_accuracy: 0.9783\n","Epoch 41/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1123 - accuracy: 0.9627 - val_loss: 0.1018 - val_accuracy: 0.9638\n","Epoch 42/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1037 - accuracy: 0.9642 - val_loss: 0.0935 - val_accuracy: 0.9710\n","Epoch 43/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1104 - accuracy: 0.9580 - val_loss: 0.0961 - val_accuracy: 0.9638\n","Epoch 44/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1113 - accuracy: 0.9596 - val_loss: 0.0945 - val_accuracy: 0.9638\n","Epoch 45/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1153 - accuracy: 0.9533 - val_loss: 0.0810 - val_accuracy: 0.9710\n","Epoch 46/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0879 - accuracy: 0.9673 - val_loss: 0.0914 - val_accuracy: 0.9710\n","Epoch 47/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1178 - accuracy: 0.9518 - val_loss: 0.0885 - val_accuracy: 0.9710\n","Epoch 48/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1080 - accuracy: 0.9642 - val_loss: 0.0968 - val_accuracy: 0.9638\n","Epoch 49/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0972 - accuracy: 0.9658 - val_loss: 0.0874 - val_accuracy: 0.9710\n","Epoch 50/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0873 - accuracy: 0.9658 - val_loss: 0.0807 - val_accuracy: 0.9710\n","Epoch 51/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0948 - accuracy: 0.9689 - val_loss: 0.0853 - val_accuracy: 0.9710\n","Epoch 52/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0854 - accuracy: 0.9767 - val_loss: 0.0936 - val_accuracy: 0.9710\n","Epoch 53/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0844 - accuracy: 0.9689 - val_loss: 0.0886 - val_accuracy: 0.9710\n","Epoch 54/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0891 - accuracy: 0.9611 - val_loss: 0.0821 - val_accuracy: 0.9638\n","Epoch 55/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0916 - accuracy: 0.9705 - val_loss: 0.0911 - val_accuracy: 0.9710\n","Epoch 56/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0822 - accuracy: 0.9673 - val_loss: 0.0789 - val_accuracy: 0.9710\n","Epoch 57/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.1056 - accuracy: 0.9673 - val_loss: 0.0893 - val_accuracy: 0.9710\n","Epoch 58/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0908 - accuracy: 0.9673 - val_loss: 0.0932 - val_accuracy: 0.9710\n","Epoch 59/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0741 - accuracy: 0.9767 - val_loss: 0.0904 - val_accuracy: 0.9710\n","Epoch 60/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0773 - accuracy: 0.9705 - val_loss: 0.0787 - val_accuracy: 0.9783\n","Epoch 61/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0844 - accuracy: 0.9658 - val_loss: 0.0801 - val_accuracy: 0.9710\n","Epoch 62/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0776 - accuracy: 0.9751 - val_loss: 0.1000 - val_accuracy: 0.9638\n","Epoch 63/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0861 - accuracy: 0.9611 - val_loss: 0.0776 - val_accuracy: 0.9710\n","Epoch 64/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0892 - accuracy: 0.9720 - val_loss: 0.0895 - val_accuracy: 0.9638\n","Epoch 65/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0967 - accuracy: 0.9767 - val_loss: 0.0836 - val_accuracy: 0.9710\n","Epoch 66/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0896 - accuracy: 0.9658 - val_loss: 0.1037 - val_accuracy: 0.9638\n","Epoch 67/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0748 - accuracy: 0.9798 - val_loss: 0.1009 - val_accuracy: 0.9710\n","Epoch 68/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0655 - accuracy: 0.9782 - val_loss: 0.0966 - val_accuracy: 0.9638\n","Epoch 69/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0967 - accuracy: 0.9705 - val_loss: 0.0961 - val_accuracy: 0.9710\n","Epoch 70/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0851 - accuracy: 0.9689 - val_loss: 0.1124 - val_accuracy: 0.9565\n","Epoch 71/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0728 - accuracy: 0.9767 - val_loss: 0.1050 - val_accuracy: 0.9638\n","Epoch 72/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0728 - accuracy: 0.9736 - val_loss: 0.0868 - val_accuracy: 0.9710\n","Epoch 73/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0813 - accuracy: 0.9751 - val_loss: 0.0906 - val_accuracy: 0.9710\n","Epoch 74/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0759 - accuracy: 0.9782 - val_loss: 0.0953 - val_accuracy: 0.9638\n","Epoch 75/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0755 - accuracy: 0.9782 - val_loss: 0.0870 - val_accuracy: 0.9710\n","Epoch 76/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0798 - accuracy: 0.9782 - val_loss: 0.1031 - val_accuracy: 0.9638\n","Epoch 77/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0680 - accuracy: 0.9813 - val_loss: 0.0899 - val_accuracy: 0.9710\n","Epoch 78/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0715 - accuracy: 0.9798 - val_loss: 0.0976 - val_accuracy: 0.9638\n","Epoch 79/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0596 - accuracy: 0.9813 - val_loss: 0.1182 - val_accuracy: 0.9638\n","Epoch 80/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0674 - accuracy: 0.9798 - val_loss: 0.1020 - val_accuracy: 0.9638\n","Epoch 81/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0600 - accuracy: 0.9767 - val_loss: 0.1072 - val_accuracy: 0.9638\n","Epoch 82/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0621 - accuracy: 0.9798 - val_loss: 0.1090 - val_accuracy: 0.9638\n","Epoch 83/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0575 - accuracy: 0.9829 - val_loss: 0.0797 - val_accuracy: 0.9783\n","Epoch 84/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0651 - accuracy: 0.9829 - val_loss: 0.1021 - val_accuracy: 0.9710\n","Epoch 85/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0593 - accuracy: 0.9798 - val_loss: 0.1172 - val_accuracy: 0.9638\n","Epoch 86/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0996 - accuracy: 0.9705 - val_loss: 0.0957 - val_accuracy: 0.9710\n","Epoch 87/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0692 - accuracy: 0.9751 - val_loss: 0.1151 - val_accuracy: 0.9710\n","Epoch 88/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0663 - accuracy: 0.9813 - val_loss: 0.1129 - val_accuracy: 0.9710\n","Epoch 89/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0769 - accuracy: 0.9751 - val_loss: 0.0986 - val_accuracy: 0.9710\n","Epoch 90/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0693 - accuracy: 0.9736 - val_loss: 0.1011 - val_accuracy: 0.9638\n","Epoch 91/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0618 - accuracy: 0.9720 - val_loss: 0.0849 - val_accuracy: 0.9710\n","Epoch 92/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0528 - accuracy: 0.9813 - val_loss: 0.0866 - val_accuracy: 0.9638\n","Epoch 93/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0691 - accuracy: 0.9813 - val_loss: 0.1050 - val_accuracy: 0.9638\n","Epoch 94/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0656 - accuracy: 0.9782 - val_loss: 0.0964 - val_accuracy: 0.9638\n","Epoch 95/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0582 - accuracy: 0.9782 - val_loss: 0.1007 - val_accuracy: 0.9638\n","Epoch 96/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0510 - accuracy: 0.9798 - val_loss: 0.0869 - val_accuracy: 0.9710\n","Epoch 97/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0524 - accuracy: 0.9798 - val_loss: 0.1010 - val_accuracy: 0.9638\n","Epoch 98/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0674 - accuracy: 0.9767 - val_loss: 0.0953 - val_accuracy: 0.9638\n","Epoch 99/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0436 - accuracy: 0.9891 - val_loss: 0.0941 - val_accuracy: 0.9710\n","Epoch 100/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0593 - accuracy: 0.9782 - val_loss: 0.1065 - val_accuracy: 0.9638\n","Epoch 101/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0666 - accuracy: 0.9829 - val_loss: 0.1084 - val_accuracy: 0.9638\n","Epoch 102/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0587 - accuracy: 0.9876 - val_loss: 0.1199 - val_accuracy: 0.9638\n","Epoch 103/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0534 - accuracy: 0.9829 - val_loss: 0.1105 - val_accuracy: 0.9710\n","Epoch 104/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0525 - accuracy: 0.9860 - val_loss: 0.1257 - val_accuracy: 0.9565\n","Epoch 105/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0757 - accuracy: 0.9829 - val_loss: 0.1041 - val_accuracy: 0.9710\n","Epoch 106/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0635 - accuracy: 0.9767 - val_loss: 0.1088 - val_accuracy: 0.9710\n","Epoch 107/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0713 - accuracy: 0.9782 - val_loss: 0.1042 - val_accuracy: 0.9638\n","Epoch 108/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0500 - accuracy: 0.9829 - val_loss: 0.0828 - val_accuracy: 0.9710\n","Epoch 109/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0658 - accuracy: 0.9860 - val_loss: 0.1069 - val_accuracy: 0.9638\n","Epoch 110/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0623 - accuracy: 0.9798 - val_loss: 0.0890 - val_accuracy: 0.9710\n","Epoch 111/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0557 - accuracy: 0.9767 - val_loss: 0.1227 - val_accuracy: 0.9565\n","Epoch 112/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0630 - accuracy: 0.9829 - val_loss: 0.0968 - val_accuracy: 0.9710\n","Epoch 113/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0495 - accuracy: 0.9891 - val_loss: 0.1193 - val_accuracy: 0.9710\n","Epoch 114/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0562 - accuracy: 0.9813 - val_loss: 0.1031 - val_accuracy: 0.9710\n","Epoch 115/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0513 - accuracy: 0.9813 - val_loss: 0.1219 - val_accuracy: 0.9638\n","Epoch 116/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0551 - accuracy: 0.9876 - val_loss: 0.1087 - val_accuracy: 0.9710\n","Epoch 117/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0440 - accuracy: 0.9876 - val_loss: 0.1251 - val_accuracy: 0.9565\n","Epoch 118/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0559 - accuracy: 0.9782 - val_loss: 0.1032 - val_accuracy: 0.9710\n","Epoch 119/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0583 - accuracy: 0.9844 - val_loss: 0.1028 - val_accuracy: 0.9710\n","Epoch 120/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0433 - accuracy: 0.9860 - val_loss: 0.1207 - val_accuracy: 0.9710\n","Epoch 121/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0453 - accuracy: 0.9844 - val_loss: 0.1205 - val_accuracy: 0.9638\n","Epoch 122/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0566 - accuracy: 0.9860 - val_loss: 0.1131 - val_accuracy: 0.9710\n","Epoch 123/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0609 - accuracy: 0.9813 - val_loss: 0.1223 - val_accuracy: 0.9710\n","Epoch 124/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0453 - accuracy: 0.9860 - val_loss: 0.1097 - val_accuracy: 0.9710\n","Epoch 125/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0673 - accuracy: 0.9829 - val_loss: 0.1225 - val_accuracy: 0.9565\n","Epoch 126/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0451 - accuracy: 0.9891 - val_loss: 0.1076 - val_accuracy: 0.9710\n","Epoch 127/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0381 - accuracy: 0.9876 - val_loss: 0.1131 - val_accuracy: 0.9710\n","Epoch 128/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0486 - accuracy: 0.9876 - val_loss: 0.1161 - val_accuracy: 0.9710\n","Epoch 129/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0349 - accuracy: 0.9922 - val_loss: 0.1130 - val_accuracy: 0.9710\n","Epoch 130/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0431 - accuracy: 0.9891 - val_loss: 0.1248 - val_accuracy: 0.9638\n","Epoch 131/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0595 - accuracy: 0.9767 - val_loss: 0.1475 - val_accuracy: 0.9565\n","Epoch 132/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0533 - accuracy: 0.9844 - val_loss: 0.1228 - val_accuracy: 0.9638\n","Epoch 133/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0739 - accuracy: 0.9798 - val_loss: 0.1213 - val_accuracy: 0.9638\n","Epoch 134/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0537 - accuracy: 0.9813 - val_loss: 0.1114 - val_accuracy: 0.9638\n","Epoch 135/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0494 - accuracy: 0.9844 - val_loss: 0.1201 - val_accuracy: 0.9638\n","Epoch 136/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0710 - accuracy: 0.9813 - val_loss: 0.1256 - val_accuracy: 0.9638\n","Epoch 137/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0496 - accuracy: 0.9829 - val_loss: 0.1436 - val_accuracy: 0.9638\n","Epoch 138/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0717 - accuracy: 0.9813 - val_loss: 0.1593 - val_accuracy: 0.9565\n","Epoch 139/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0437 - accuracy: 0.9876 - val_loss: 0.1371 - val_accuracy: 0.9638\n","Epoch 140/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0600 - accuracy: 0.9844 - val_loss: 0.1426 - val_accuracy: 0.9638\n","Epoch 141/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0476 - accuracy: 0.9907 - val_loss: 0.1407 - val_accuracy: 0.9638\n","Epoch 142/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0376 - accuracy: 0.9876 - val_loss: 0.1316 - val_accuracy: 0.9638\n","Epoch 143/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0376 - accuracy: 0.9876 - val_loss: 0.1297 - val_accuracy: 0.9710\n","Epoch 144/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0577 - accuracy: 0.9829 - val_loss: 0.1204 - val_accuracy: 0.9710\n","Epoch 145/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0558 - accuracy: 0.9829 - val_loss: 0.1507 - val_accuracy: 0.9565\n","Epoch 146/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0420 - accuracy: 0.9891 - val_loss: 0.1414 - val_accuracy: 0.9565\n","Epoch 147/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0642 - accuracy: 0.9844 - val_loss: 0.1241 - val_accuracy: 0.9638\n","Epoch 148/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0521 - accuracy: 0.9829 - val_loss: 0.1375 - val_accuracy: 0.9638\n","Epoch 149/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0592 - accuracy: 0.9876 - val_loss: 0.1495 - val_accuracy: 0.9565\n","Epoch 150/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0637 - accuracy: 0.9782 - val_loss: 0.1147 - val_accuracy: 0.9710\n","Epoch 151/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0347 - accuracy: 0.9907 - val_loss: 0.1413 - val_accuracy: 0.9565\n","Epoch 152/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0437 - accuracy: 0.9891 - val_loss: 0.1314 - val_accuracy: 0.9638\n","Epoch 153/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0405 - accuracy: 0.9876 - val_loss: 0.1352 - val_accuracy: 0.9710\n","Epoch 154/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0498 - accuracy: 0.9860 - val_loss: 0.1430 - val_accuracy: 0.9638\n","Epoch 155/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0387 - accuracy: 0.9907 - val_loss: 0.1313 - val_accuracy: 0.9710\n","Epoch 156/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0464 - accuracy: 0.9860 - val_loss: 0.1415 - val_accuracy: 0.9710\n","Epoch 157/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0451 - accuracy: 0.9844 - val_loss: 0.1356 - val_accuracy: 0.9638\n","Epoch 158/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0495 - accuracy: 0.9844 - val_loss: 0.1154 - val_accuracy: 0.9710\n","Epoch 159/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0395 - accuracy: 0.9891 - val_loss: 0.1411 - val_accuracy: 0.9710\n","Epoch 160/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0426 - accuracy: 0.9891 - val_loss: 0.1383 - val_accuracy: 0.9710\n","Epoch 161/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0445 - accuracy: 0.9860 - val_loss: 0.1418 - val_accuracy: 0.9710\n","Epoch 162/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0373 - accuracy: 0.9907 - val_loss: 0.1567 - val_accuracy: 0.9638\n","Epoch 163/200\n","41/41 [==============================] - 0s 8ms/step - loss: 0.0447 - accuracy: 0.9860 - val_loss: 0.1671 - val_accuracy: 0.9638\n","Epoch 164/200\n","41/41 [==============================] - 0s 8ms/step - loss: 0.0413 - accuracy: 0.9922 - val_loss: 0.1507 - val_accuracy: 0.9710\n","Epoch 165/200\n","41/41 [==============================] - 0s 7ms/step - loss: 0.0452 - accuracy: 0.9891 - val_loss: 0.1428 - val_accuracy: 0.9710\n","Epoch 166/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0333 - accuracy: 0.9922 - val_loss: 0.1467 - val_accuracy: 0.9638\n","Epoch 167/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0462 - accuracy: 0.9860 - val_loss: 0.1513 - val_accuracy: 0.9710\n","Epoch 168/200\n","41/41 [==============================] - 0s 6ms/step - loss: 0.0277 - accuracy: 0.9938 - val_loss: 0.1484 - val_accuracy: 0.9710\n","Epoch 169/200\n","41/41 [==============================] - 0s 11ms/step - loss: 0.0293 - accuracy: 0.9907 - val_loss: 0.1726 - val_accuracy: 0.9710\n","Epoch 170/200\n","41/41 [==============================] - 0s 8ms/step - loss: 0.0476 - accuracy: 0.9829 - val_loss: 0.1179 - val_accuracy: 0.9638\n","Epoch 171/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0361 - accuracy: 0.9891 - val_loss: 0.1424 - val_accuracy: 0.9638\n","Epoch 172/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0407 - accuracy: 0.9907 - val_loss: 0.1529 - val_accuracy: 0.9638\n","Epoch 173/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0532 - accuracy: 0.9860 - val_loss: 0.1480 - val_accuracy: 0.9638\n","Epoch 174/200\n","41/41 [==============================] - 0s 9ms/step - loss: 0.0456 - accuracy: 0.9844 - val_loss: 0.1839 - val_accuracy: 0.9565\n","Epoch 175/200\n","41/41 [==============================] - 0s 10ms/step - loss: 0.0460 - accuracy: 0.9829 - val_loss: 0.1755 - val_accuracy: 0.9565\n","Epoch 176/200\n","41/41 [==============================] - 0s 5ms/step - loss: 0.0318 - accuracy: 0.9922 - val_loss: 0.1502 - val_accuracy: 0.9638\n","Epoch 177/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0467 - accuracy: 0.9829 - val_loss: 0.1624 - val_accuracy: 0.9638\n","Epoch 178/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0470 - accuracy: 0.9844 - val_loss: 0.1300 - val_accuracy: 0.9710\n","Epoch 179/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0389 - accuracy: 0.9876 - val_loss: 0.1251 - val_accuracy: 0.9710\n","Epoch 180/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0347 - accuracy: 0.9907 - val_loss: 0.1404 - val_accuracy: 0.9638\n","Epoch 181/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0341 - accuracy: 0.9922 - val_loss: 0.1532 - val_accuracy: 0.9638\n","Epoch 182/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0307 - accuracy: 0.9907 - val_loss: 0.1377 - val_accuracy: 0.9710\n","Epoch 183/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0450 - accuracy: 0.9860 - val_loss: 0.1473 - val_accuracy: 0.9710\n","Epoch 184/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0391 - accuracy: 0.9813 - val_loss: 0.1426 - val_accuracy: 0.9710\n","Epoch 185/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0455 - accuracy: 0.9876 - val_loss: 0.1491 - val_accuracy: 0.9710\n","Epoch 186/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0380 - accuracy: 0.9876 - val_loss: 0.1528 - val_accuracy: 0.9710\n","Epoch 187/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0619 - accuracy: 0.9844 - val_loss: 0.1400 - val_accuracy: 0.9710\n","Epoch 188/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0503 - accuracy: 0.9844 - val_loss: 0.1479 - val_accuracy: 0.9638\n","Epoch 189/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0465 - accuracy: 0.9860 - val_loss: 0.1687 - val_accuracy: 0.9638\n","Epoch 190/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0297 - accuracy: 0.9922 - val_loss: 0.1708 - val_accuracy: 0.9638\n","Epoch 191/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0393 - accuracy: 0.9860 - val_loss: 0.1825 - val_accuracy: 0.9638\n","Epoch 192/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0330 - accuracy: 0.9907 - val_loss: 0.1798 - val_accuracy: 0.9638\n","Epoch 193/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0286 - accuracy: 0.9938 - val_loss: 0.1947 - val_accuracy: 0.9638\n","Epoch 194/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0362 - accuracy: 0.9907 - val_loss: 0.1617 - val_accuracy: 0.9710\n","Epoch 195/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0467 - accuracy: 0.9891 - val_loss: 0.1691 - val_accuracy: 0.9638\n","Epoch 196/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0479 - accuracy: 0.9876 - val_loss: 0.1662 - val_accuracy: 0.9638\n","Epoch 197/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0696 - accuracy: 0.9876 - val_loss: 0.1665 - val_accuracy: 0.9710\n","Epoch 198/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0343 - accuracy: 0.9891 - val_loss: 0.1961 - val_accuracy: 0.9638\n","Epoch 199/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0313 - accuracy: 0.9922 - val_loss: 0.1874 - val_accuracy: 0.9638\n","Epoch 200/200\n","41/41 [==============================] - 0s 3ms/step - loss: 0.0353 - accuracy: 0.9907 - val_loss: 0.1935 - val_accuracy: 0.9638\n"]}]},{"cell_type":"code","source":["print(\"Evaluate on test data\")\n","results = model.evaluate(X_test, y_test, batch_size=32)\n","print(\"test loss, test acc:\", results)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YOyDDFql4YkD","executionInfo":{"status":"ok","timestamp":1653761896307,"user_tz":-420,"elapsed":49,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"a03dc58d-db51-4db8-e9bf-0d296f8ef476"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Evaluate on test data\n","5/5 [==============================] - 0s 3ms/step - loss: 0.1527 - accuracy: 0.9638\n","test loss, test acc: [0.15268439054489136, 0.9637681245803833]\n"]}]},{"cell_type":"code","source":["# test the model prediction\n","\n","for file in glob.glob(pushup_up_folder)[:3]:\n","    image = cv2.imread(file)\n","    keypoints = processPose(image).flatten().reshape(1, 51)\n","    predd = model.predict(keypoints)\n","    posee = np.argmax(predd)\n","    confidence = predd[0][posee]\n","    print(predd)\n","    print(posee)\n","    print(confidence)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4IVTqFkMECuG","executionInfo":{"status":"ok","timestamp":1653761897001,"user_tz":-420,"elapsed":721,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"b18d1625-4fe9-4d9c-c457-d297847069ad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1.699578e-08 1.000000e+00]]\n","1\n","1.0\n","[[1.4901272e-04 9.9985099e-01]]\n","1\n","0.999851\n","[[2.1447202e-13 1.0000000e+00]]\n","1\n","1.0\n"]}]},{"cell_type":"code","source":["image = cv2.imread('/content/003_e63ed852-reversed.jpg')\n","keypoints = processPose(image).flatten().reshape(1, 51)\n","predd = model.predict(keypoints)\n","posee = np.argmax(predd)\n","confidence = predd[0][posee]\n","print(predd)\n","print(posee)\n","print(confidence)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lj6H-wWOYV7S","executionInfo":{"status":"ok","timestamp":1653761897002,"user_tz":-420,"elapsed":15,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"13db00d2-4420-4978-94fe-bc17bb046b21"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[3.5801364e-05 9.9996424e-01]]\n","1\n","0.99996424\n"]}]},{"cell_type":"markdown","source":["## 3. Save The Model"],"metadata":{"id":"rSBstkcD_nva"}},{"cell_type":"code","source":["!pip install pyyaml h5py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mhOe3RvD_sz6","executionInfo":{"status":"ok","timestamp":1653756920910,"user_tz":-420,"elapsed":4123,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"16634101-6b86-4816-9c21-ab6c6fec4c84"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (3.13)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.7/dist-packages (3.1.0)\n","Requirement already satisfied: numpy>=1.14.5 in /usr/local/lib/python3.7/dist-packages (from h5py) (1.21.6)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py) (1.5.2)\n"]}]},{"cell_type":"code","source":["model.save('pushup-counter-movenet-28may22.h5')"],"metadata":{"id":"DdM8p7nWBmDQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 4. Convert to TFlite"],"metadata":{"id":"dUEal5PAiwsW"}},{"cell_type":"code","source":["converter = tf.lite.TFLiteConverter.from_keras_model(model)\n","tflite_model = converter.convert()\n","\n","with open('pushup-model-28may22.tflite', 'wb') as f:\n","  f.write(tflite_model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N8bGSSWYi5PH","executionInfo":{"status":"ok","timestamp":1653756992554,"user_tz":-420,"elapsed":7452,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"e22e57f7-5545-4b13-c74f-7f4aee81c0b7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["INFO:tensorflow:Assets written to: /tmp/tmp472o21uc/assets\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:Buffer deduplication procedure will be skipped when flatbuffer library is not properly loaded\n"]}]}]}