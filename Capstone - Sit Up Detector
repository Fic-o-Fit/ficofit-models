{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Capstone - Sit Up Detector","provenance":[{"file_id":"1BQNF_CD-36vpeI--L1pI0-uJPMMyxfmd","timestamp":1653797004984},{"file_id":"1J8E2UZoWUZcd5mp6brqSD_-gpqaWonMa","timestamp":1651865637744}],"collapsed_sections":[],"mount_file_id":"1J8E2UZoWUZcd5mp6brqSD_-gpqaWonMa","authorship_tag":"ABX9TyP98obG6+LCs6Qm8zR9OQmn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# üí™üèΩ**Sit Up Detector**üí¶‚ú®\n","\n","This notebook is presented to you by Bangkit Team C22-PS072's ML Squadüíñ:\n","\n","\n","*   Deandra Setyaputri - M2010F1120\n","*   Wilma Elysia - M7013F1348\n","\n"],"metadata":{"id":"3YSzRfpc5NnJ"}},{"cell_type":"markdown","source":["## 0. Manage Dependencies"],"metadata":{"id":"tiI0kJBbwui0"}},{"cell_type":"code","source":["!pip install tensorflow tensorflow-gpu opencv-python matplotlib sklearn"],"metadata":{"id":"KZVy7KhvXSAN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653800557425,"user_tz":-420,"elapsed":4137,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"87bc0815-4dfe-4722-de19-889bcb1aa601"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.7/dist-packages (2.8.0+zzzcolab20220506162203)\n","Requirement already satisfied: tensorflow-gpu in /usr/local/lib/python3.7/dist-packages (2.8.2)\n","Requirement already satisfied: opencv-python in /usr/local/lib/python3.7/dist-packages (4.1.2.30)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (3.2.2)\n","Requirement already satisfied: sklearn in /usr/local/lib/python3.7/dist-packages (0.0)\n","Requirement already satisfied: tensorboard<2.9,>=2.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.8.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.1.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.46.1)\n","Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.21.6)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: tf-estimator-nightly==2.8.0.dev2021122109 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.8.0.dev2021122109)\n","Requirement already satisfied: protobuf>=3.9.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (3.17.3)\n","Requirement already satisfied: flatbuffers>=1.12 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.0)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.15.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from tensorflow) (57.4.0)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (3.1.0)\n","Requirement already satisfied: libclang>=9.0.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (14.0.1)\n","Requirement already satisfied: absl-py>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.0.0)\n","Requirement already satisfied: gast>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (0.5.3)\n","Requirement already satisfied: keras<2.9,>=2.8.0rc0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.8.0)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.14.1)\n","Requirement already satisfied: keras-preprocessing>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.1.2)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (4.2.0)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (0.26.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.7/dist-packages (from astunparse>=1.6.0->tensorflow) (0.37.1)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py>=2.9.0->tensorflow) (1.5.2)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (0.4.6)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (2.23.0)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (0.6.1)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (1.0.1)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (1.35.0)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (1.8.1)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (3.3.7)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (0.2.8)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (4.8)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (4.2.4)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow) (1.3.1)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard<2.9,>=2.8->tensorflow) (4.11.3)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.9,>=2.8->tensorflow) (3.8.0)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (0.4.8)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (2022.5.18.1)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (2.10)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow) (3.2.0)\n","Requirement already satisfied: tensorflow-estimator<2.9,>=2.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu) (2.8.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (3.0.9)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (0.11.0)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (1.4.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from sklearn) (1.0.2)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->sklearn) (1.1.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->sklearn) (3.1.0)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->sklearn) (1.4.1)\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","import glob\n","import cv2\n","import os\n","import enum\n","import tensorflow as tf\n","from tensorflow import keras"],"metadata":{"id":"hQly5z6WydbC","executionInfo":{"status":"ok","timestamp":1653800557427,"user_tz":-420,"elapsed":25,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":21,"outputs":[]},{"cell_type":"markdown","source":["## 1. Preprocess Input Images\n","First, create a copy of every image data where they are flipped horizontally so that the model can accurately detect push-up poses regardless if the user is facing left or right."],"metadata":{"id":"dspDqEBd_Vq6"}},{"cell_type":"code","source":["from google.colab import drive\n","\n","drive.mount(\"/content/drive\") \n","root = \"/content/drive/My Drive/ml-gdrive/Datasets/\"\n","\n","not_situp_folder = root + \"random_poses\" + \"/*.*\"\n","situp_folder = root + \"situp\" + \"/*.*\"\n","movenet_folder = \"/content/drive/My Drive/ml-gdrive/Models/lite-model_movenet_singlepose_lightning_3.tflite\""],"metadata":{"id":"qNz5rgwh_eZT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653800563954,"user_tz":-420,"elapsed":6550,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"30080ede-beab-45df-fa3b-b058f77e2620"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["def flip_img_folder(folder):\n","    for file in glob.glob(folder):\n","        image = cv2.imread(file)\n","        flipped_img_path = file[:-4] + \"-reversed.\" + file[-3:]\n","        # file[:-4] is the name of the path and image name without the .jpg or .png extension\n","\n","        if(file[-13:-4] != \"-reversed\" and os.path.exists(flipped_img_path) == False):\n","            flipped_img = cv2.flip(image, 1)\n","            cv2.imwrite(flipped_img_path, flipped_img)"],"metadata":{"id":"WmgnqaZxEKga","executionInfo":{"status":"ok","timestamp":1653800563955,"user_tz":-420,"elapsed":27,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["# flip_img_folder(pushup_up_folder)\n","# flip_img_folder(pushup_down_folder)\n","flip_img_folder(situp_folder)"],"metadata":{"id":"t5R58Me4PnZm","executionInfo":{"status":"ok","timestamp":1653800567199,"user_tz":-420,"elapsed":3269,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":["We will convert all the image data to arrays of landmarks representing the human pose in each image. Then create a csv file containing those data to be used in training later."],"metadata":{"id":"tV_qwPJfD9qX"}},{"cell_type":"code","source":["interpreter = tf.lite.Interpreter(model_path=movenet_folder)\n","interpreter.allocate_tensors()"],"metadata":{"id":"gPZK5IHId-ot","executionInfo":{"status":"ok","timestamp":1653800569590,"user_tz":-420,"elapsed":5,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["def processPose(image):\n","    img = tf.image.resize_with_pad(np.expand_dims(image, axis=0), 192,192)\n","    img = tf.cast(img, dtype=tf.float32)\n","    input_details = interpreter.get_input_details()\n","    output_details = interpreter.get_output_details()\n","    interpreter.set_tensor(input_details[0]['index'], np.array(img))\n","    # Invoke inference.\n","    interpreter.invoke()\n","    # Get the model prediction.\n","    keypoints_with_scores = interpreter.get_tensor(output_details[0]['index'])\n","    keypoints = keypoints_with_scores.flatten().reshape(17,3)\n","    fixed_keypoints = []\n","    for [x, y, score] in keypoints:\n","        if score < 0.2:\n","            fixed_keypoints.append([0, 0, 0])\n","        else:\n","            fixed_keypoints.append([x, y, score])\n","    return np.array(fixed_keypoints)"],"metadata":{"id":"tAnE2ZRkYdVn","executionInfo":{"status":"ok","timestamp":1653800572136,"user_tz":-420,"elapsed":378,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":26,"outputs":[]},{"cell_type":"markdown","source":["### Trying out the process"],"metadata":{"id":"Z-tsIhlPBKBy"}},{"cell_type":"code","source":["# # trying out the mechanism\n","# for file in glob.glob(pushup_up_folder):\n","#     img = cv2.imread(file)\n","#     keypoints = processPose(img).flatten().reshape(17, 3)\n","    \n","#     break\n","# img = cv2.imread('/content/800px-A_black_image.jpg')\n","# keypoints = processPose(img).flatten().reshape(17, 3)\n","# fixed_keypoints = []\n","# for [x, y, score] in keypoints:\n","#     if score < 0.2:\n","#         fixed_keypoints.append([0, 0, 0])\n","#     else:\n","#         fixed_keypoints.append([x, y, score])\n","# print(fixed_keypoints)\n","#     # landmarks = np.array([[res.x, res.y, res.z, res.visibility] for res in results.pose_world_landmarks.landmark]).flatten()\n","#     # print(landmarks)"],"metadata":{"id":"2770Ruv2SKiD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Enum and Function Definitions"],"metadata":{"id":"BcXYidhjBj5Q"}},{"cell_type":"code","source":["# Source: the Movenet TFLite Documentation\n","class BodyPart(enum.Enum):\n","  \"\"\"Enum representing human body keypoints detected by pose estimation models.\"\"\"\n","  NOSE = 0\n","  LEFT_EYE = 1\n","  RIGHT_EYE = 2\n","  LEFT_EAR = 3\n","  RIGHT_EAR = 4\n","  LEFT_SHOULDER = 5\n","  RIGHT_SHOULDER = 6\n","  LEFT_ELBOW = 7\n","  RIGHT_ELBOW = 8\n","  LEFT_WRIST = 9\n","  RIGHT_WRIST = 10\n","  LEFT_HIP = 11\n","  RIGHT_HIP = 12\n","  LEFT_KNEE = 13\n","  RIGHT_KNEE = 14\n","  LEFT_ANKLE = 15\n","  RIGHT_ANKLE = 16"],"metadata":{"id":"Nmph4npajY0U","executionInfo":{"status":"ok","timestamp":1653800575790,"user_tz":-420,"elapsed":503,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","execution_count":28,"metadata":{"id":"HgQMdfeT65Z5","executionInfo":{"status":"ok","timestamp":1653800578002,"user_tz":-420,"elapsed":562,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"outputs":[],"source":["# These are a set of functions to preprocess the input data before classification\n","# Source: the Movenet TFLite Documentation\n","\n","def get_center_point(landmarks, left_bodypart, right_bodypart):\n","  \"\"\"Calculates the center point of the two given landmarks.\"\"\"\n","\n","  left = tf.gather(landmarks, left_bodypart.value, axis=1)\n","  right = tf.gather(landmarks, right_bodypart.value, axis=1)\n","  center = left * 0.5 + right * 0.5\n","  return center\n","\n","\n","def get_pose_size(landmarks, torso_size_multiplier=2.5):\n","  \"\"\"Calculates pose size.\n","\n","  It is the maximum of two values:\n","    * Torso size multiplied by `torso_size_multiplier`\n","    * Maximum distance from pose center to any pose landmark\n","  \"\"\"\n","  # Hips center\n","  hips_center = get_center_point(landmarks, BodyPart.LEFT_HIP, \n","                                 BodyPart.RIGHT_HIP)\n","\n","  # Shoulders center\n","  shoulders_center = get_center_point(landmarks, BodyPart.LEFT_SHOULDER,\n","                                      BodyPart.RIGHT_SHOULDER)\n","\n","  # Torso size as the minimum body size\n","  torso_size = tf.linalg.norm(shoulders_center - hips_center)\n","\n","  # Pose center\n","  pose_center_new = get_center_point(landmarks, BodyPart.LEFT_HIP, \n","                                     BodyPart.RIGHT_HIP)\n","  pose_center_new = tf.expand_dims(pose_center_new, axis=1)\n","  # Broadcast the pose center to the same size as the landmark vector to\n","  # perform substraction\n","  pose_center_new = tf.broadcast_to(pose_center_new,\n","                                    [tf.size(landmarks) // (17*2), 17, 2])\n","\n","  # Dist to pose center\n","  d = tf.gather(landmarks - pose_center_new, 0, axis=0,\n","                name=\"dist_to_pose_center\")\n","  # Max dist to pose center\n","  max_dist = tf.reduce_max(tf.linalg.norm(d, axis=0))\n","\n","  # Normalize scale\n","  pose_size = tf.maximum(torso_size * torso_size_multiplier, max_dist)\n","\n","  return pose_size\n","\n","\n","def normalize_pose_landmarks(landmarks):\n","  \"\"\"Normalizes the landmarks translation by moving the pose center to (0,0) and\n","  scaling it to a constant pose size.\n","  \"\"\"\n","  # Move landmarks so that the pose center becomes (0,0)\n","  pose_center = get_center_point(landmarks, BodyPart.LEFT_HIP, \n","                                 BodyPart.RIGHT_HIP)\n","  pose_center = tf.expand_dims(pose_center, axis=1)\n","  # Broadcast the pose center to the same size as the landmark vector to perform\n","  # substraction\n","  pose_center = tf.broadcast_to(pose_center, \n","                                [tf.size(landmarks) // (17*2), 17, 2])\n","  landmarks = landmarks - pose_center\n","\n","  # Scale the landmarks to a constant pose size\n","  pose_size = get_pose_size(landmarks)\n","  landmarks /= pose_size\n","\n","  return landmarks\n","\n","\n","def landmarks_to_embedding(landmarks_and_scores):\n","  \"\"\"Converts the input landmarks into a pose embedding.\"\"\"\n","  # Reshape the flat input into a matrix with shape=(17, 3)\n","  reshaped_inputs = keras.layers.Reshape((17, 3))(landmarks_and_scores)\n","\n","  # Normalize landmarks 2D\n","  landmarks = normalize_pose_landmarks(reshaped_inputs[:, :, :2])\n","\n","  # Flatten the normalized landmark coordinates into a vector\n","  embedding = keras.layers.Flatten()(landmarks)\n","\n","  return embedding"]},{"cell_type":"markdown","source":["## 2. Create Dataset"],"metadata":{"id":"Pla4feGBBxwl"}},{"cell_type":"code","source":["def detect_pose_from_folder(folder, folder_label):\n","    landmarks = []\n","    labels = []\n","    for file in glob.glob(folder):\n","        image = cv2.imread(file)\n","        keypoints = processPose(image).flatten()\n","        if len(keypoints)!=0:\n","            landmarks.append(keypoints)\n","            labels.append(folder_label)\n","    return landmarks, labels"],"metadata":{"id":"9EXF5IfUhpG8","executionInfo":{"status":"ok","timestamp":1653800580292,"user_tz":-420,"elapsed":458,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["# '1' is the label for the sit up movement\n","not_situp_landmarks, not_situp_labels = detect_pose_from_folder(not_situp_folder, 0)\n","situp_landmarks, situp_labels = detect_pose_from_folder(situp_folder, 1)"],"metadata":{"id":"FpKtOMcMZle5","executionInfo":{"status":"ok","timestamp":1653800620961,"user_tz":-420,"elapsed":37676,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["landmarks = not_situp_landmarks + situp_landmarks\n","labels = not_situp_labels + situp_labels"],"metadata":{"id":"B4lovPOAevDy","executionInfo":{"status":"ok","timestamp":1653800620963,"user_tz":-420,"elapsed":25,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["print(len(landmarks))\n","print(len(labels))"],"metadata":{"id":"1jh-UB9tg9uz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653800620964,"user_tz":-420,"elapsed":22,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"545fdf76-6f8a-4e6d-900c-03cf34eab5a2"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["883\n","883\n"]}]},{"cell_type":"code","source":["import random\n","\n","X = np.array(landmarks)\n","y = np.array(labels)\n","dataset = [(X[i], y[i]) for i in range(0, len(labels))]\n","random.shuffle(dataset)\n","X.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RCrpQ0hbqs6Q","executionInfo":{"status":"ok","timestamp":1653800620965,"user_tz":-420,"elapsed":19,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"f8e990ae-6432-4c76-b329-503a16fa5544"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(883, 51)"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["import csv\n","\n","# open the file in the write mode\n","with open('/content/drive/My Drive/ml-gdrive/Datasets/situp_dataset_movenet-29may22', 'w') as f:\n","    # create the csv writer\n","    writer = csv.writer(f)\n","\n","    # write the header to the csv file\n","    writer.writerow(['situp_pose', 'pose_landmarks'])\n","\n","    for landmark, label in dataset:\n","        writer.writerow([label, landmark])"],"metadata":{"id":"tgqCaUGSa5nv","executionInfo":{"status":"ok","timestamp":1653800670856,"user_tz":-420,"elapsed":1380,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":34,"outputs":[]},{"cell_type":"markdown","source":["## 3. Train Model"],"metadata":{"id":"SCvb0Duits5j"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"1Pte6b1bgWKv"},"outputs":[],"source":["# Define the model\n","inputs = tf.keras.Input(shape=(51))  # from 17*3\n","embedding = landmarks_to_embedding(inputs)\n","\n","layer = keras.layers.Dense(128, activation=tf.nn.relu6)(embedding)\n","layer = keras.layers.Dropout(0.5)(layer)\n","layer = keras.layers.Dense(64, activation=tf.nn.relu6)(layer)\n","layer = keras.layers.Dropout(0.5)(layer)\n","outputs = keras.layers.Dense(2, activation=\"softmax\")(layer)\n","\n","model = keras.Model(inputs, outputs, name=\"situpdetector\")\n","model.summary()"]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n","X_test, X_val, y_test, y_val = train_test_split(X_test, y_test, test_size=0.5)"],"metadata":{"id":"kdtSr2kPwoEr","executionInfo":{"status":"ok","timestamp":1653800694190,"user_tz":-420,"elapsed":440,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["model.compile(\n","    optimizer='adam',\n","    loss='sparse_categorical_crossentropy',\n","    metrics=['accuracy']\n",")\n","\n","history = model.fit(X_train, y_train,\n","                    epochs=200,\n","                    batch_size=16,\n","                    validation_data=(X_val, y_val))"],"metadata":{"id":"K8I9vzbs2uC9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653800750544,"user_tz":-420,"elapsed":42446,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"c7b9e5ef-e88f-416d-ce0b-8962c10cd77b"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/200\n","39/39 [==============================] - 2s 18ms/step - loss: 0.6484 - accuracy: 0.6262 - val_loss: 0.5515 - val_accuracy: 0.7368\n","Epoch 2/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.5391 - accuracy: 0.7217 - val_loss: 0.4387 - val_accuracy: 0.8346\n","Epoch 3/200\n","39/39 [==============================] - 0s 13ms/step - loss: 0.4152 - accuracy: 0.8269 - val_loss: 0.3441 - val_accuracy: 0.8496\n","Epoch 4/200\n","39/39 [==============================] - 0s 10ms/step - loss: 0.3363 - accuracy: 0.8657 - val_loss: 0.2727 - val_accuracy: 0.8797\n","Epoch 5/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.2853 - accuracy: 0.8948 - val_loss: 0.2152 - val_accuracy: 0.8797\n","Epoch 6/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.2311 - accuracy: 0.9304 - val_loss: 0.1885 - val_accuracy: 0.9173\n","Epoch 7/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.1863 - accuracy: 0.9450 - val_loss: 0.1502 - val_accuracy: 0.9624\n","Epoch 8/200\n","39/39 [==============================] - 0s 10ms/step - loss: 0.1909 - accuracy: 0.9482 - val_loss: 0.1322 - val_accuracy: 0.9774\n","Epoch 9/200\n","39/39 [==============================] - 0s 9ms/step - loss: 0.1747 - accuracy: 0.9450 - val_loss: 0.1119 - val_accuracy: 0.9774\n","Epoch 10/200\n","39/39 [==============================] - 0s 9ms/step - loss: 0.1536 - accuracy: 0.9579 - val_loss: 0.1148 - val_accuracy: 0.9624\n","Epoch 11/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.1457 - accuracy: 0.9612 - val_loss: 0.1069 - val_accuracy: 0.9624\n","Epoch 12/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.1372 - accuracy: 0.9595 - val_loss: 0.0918 - val_accuracy: 0.9774\n","Epoch 13/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.1253 - accuracy: 0.9595 - val_loss: 0.0900 - val_accuracy: 0.9850\n","Epoch 14/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.1149 - accuracy: 0.9757 - val_loss: 0.0887 - val_accuracy: 0.9699\n","Epoch 15/200\n","39/39 [==============================] - 0s 10ms/step - loss: 0.1083 - accuracy: 0.9676 - val_loss: 0.0785 - val_accuracy: 0.9774\n","Epoch 16/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.1123 - accuracy: 0.9660 - val_loss: 0.0745 - val_accuracy: 0.9850\n","Epoch 17/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0840 - accuracy: 0.9741 - val_loss: 0.0739 - val_accuracy: 0.9850\n","Epoch 18/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.1287 - accuracy: 0.9676 - val_loss: 0.0703 - val_accuracy: 0.9774\n","Epoch 19/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.0964 - accuracy: 0.9693 - val_loss: 0.0793 - val_accuracy: 0.9699\n","Epoch 20/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.1030 - accuracy: 0.9628 - val_loss: 0.0759 - val_accuracy: 0.9699\n","Epoch 21/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0837 - accuracy: 0.9741 - val_loss: 0.0715 - val_accuracy: 0.9774\n","Epoch 22/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0836 - accuracy: 0.9741 - val_loss: 0.0708 - val_accuracy: 0.9699\n","Epoch 23/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.0791 - accuracy: 0.9773 - val_loss: 0.0570 - val_accuracy: 0.9850\n","Epoch 24/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0900 - accuracy: 0.9693 - val_loss: 0.0678 - val_accuracy: 0.9774\n","Epoch 25/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0767 - accuracy: 0.9725 - val_loss: 0.0676 - val_accuracy: 0.9774\n","Epoch 26/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0879 - accuracy: 0.9676 - val_loss: 0.0600 - val_accuracy: 0.9850\n","Epoch 27/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.0790 - accuracy: 0.9773 - val_loss: 0.0667 - val_accuracy: 0.9774\n","Epoch 28/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0767 - accuracy: 0.9773 - val_loss: 0.0500 - val_accuracy: 0.9925\n","Epoch 29/200\n","39/39 [==============================] - 0s 5ms/step - loss: 0.0546 - accuracy: 0.9806 - val_loss: 0.0612 - val_accuracy: 0.9774\n","Epoch 30/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0709 - accuracy: 0.9725 - val_loss: 0.0594 - val_accuracy: 0.9774\n","Epoch 31/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0630 - accuracy: 0.9838 - val_loss: 0.0634 - val_accuracy: 0.9774\n","Epoch 32/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.0569 - accuracy: 0.9838 - val_loss: 0.0667 - val_accuracy: 0.9774\n","Epoch 33/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0639 - accuracy: 0.9806 - val_loss: 0.0607 - val_accuracy: 0.9774\n","Epoch 34/200\n","39/39 [==============================] - 0s 10ms/step - loss: 0.0794 - accuracy: 0.9725 - val_loss: 0.0565 - val_accuracy: 0.9925\n","Epoch 35/200\n","39/39 [==============================] - 0s 10ms/step - loss: 0.0511 - accuracy: 0.9871 - val_loss: 0.0570 - val_accuracy: 0.9850\n","Epoch 36/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0507 - accuracy: 0.9822 - val_loss: 0.0681 - val_accuracy: 0.9774\n","Epoch 37/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0597 - accuracy: 0.9822 - val_loss: 0.0604 - val_accuracy: 0.9925\n","Epoch 38/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0508 - accuracy: 0.9838 - val_loss: 0.0590 - val_accuracy: 0.9925\n","Epoch 39/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.0568 - accuracy: 0.9822 - val_loss: 0.0653 - val_accuracy: 0.9774\n","Epoch 40/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0418 - accuracy: 0.9887 - val_loss: 0.0508 - val_accuracy: 0.9850\n","Epoch 41/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.0531 - accuracy: 0.9871 - val_loss: 0.0527 - val_accuracy: 0.9850\n","Epoch 42/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0554 - accuracy: 0.9838 - val_loss: 0.0556 - val_accuracy: 0.9850\n","Epoch 43/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0518 - accuracy: 0.9822 - val_loss: 0.0543 - val_accuracy: 0.9850\n","Epoch 44/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.0492 - accuracy: 0.9838 - val_loss: 0.0574 - val_accuracy: 0.9925\n","Epoch 45/200\n","39/39 [==============================] - 0s 9ms/step - loss: 0.0476 - accuracy: 0.9871 - val_loss: 0.0584 - val_accuracy: 0.9850\n","Epoch 46/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0544 - accuracy: 0.9806 - val_loss: 0.0558 - val_accuracy: 0.9850\n","Epoch 47/200\n","39/39 [==============================] - 0s 5ms/step - loss: 0.0448 - accuracy: 0.9871 - val_loss: 0.0481 - val_accuracy: 0.9925\n","Epoch 48/200\n","39/39 [==============================] - 0s 5ms/step - loss: 0.0365 - accuracy: 0.9887 - val_loss: 0.0504 - val_accuracy: 0.9850\n","Epoch 49/200\n","39/39 [==============================] - 0s 5ms/step - loss: 0.0480 - accuracy: 0.9838 - val_loss: 0.0503 - val_accuracy: 0.9850\n","Epoch 50/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0381 - accuracy: 0.9854 - val_loss: 0.0495 - val_accuracy: 0.9925\n","Epoch 51/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0477 - accuracy: 0.9854 - val_loss: 0.0613 - val_accuracy: 0.9850\n","Epoch 52/200\n","39/39 [==============================] - 0s 5ms/step - loss: 0.0404 - accuracy: 0.9887 - val_loss: 0.0589 - val_accuracy: 0.9774\n","Epoch 53/200\n","39/39 [==============================] - 0s 9ms/step - loss: 0.0405 - accuracy: 0.9838 - val_loss: 0.0503 - val_accuracy: 0.9850\n","Epoch 54/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0336 - accuracy: 0.9903 - val_loss: 0.0549 - val_accuracy: 0.9850\n","Epoch 55/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0227 - accuracy: 0.9935 - val_loss: 0.0583 - val_accuracy: 0.9850\n","Epoch 56/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0276 - accuracy: 0.9903 - val_loss: 0.0546 - val_accuracy: 0.9925\n","Epoch 57/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0294 - accuracy: 0.9903 - val_loss: 0.0577 - val_accuracy: 0.9850\n","Epoch 58/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0401 - accuracy: 0.9887 - val_loss: 0.0559 - val_accuracy: 0.9925\n","Epoch 59/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0360 - accuracy: 0.9854 - val_loss: 0.0589 - val_accuracy: 0.9850\n","Epoch 60/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.0358 - accuracy: 0.9919 - val_loss: 0.0655 - val_accuracy: 0.9850\n","Epoch 61/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.0261 - accuracy: 0.9919 - val_loss: 0.0653 - val_accuracy: 0.9850\n","Epoch 62/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0286 - accuracy: 0.9903 - val_loss: 0.0592 - val_accuracy: 0.9850\n","Epoch 63/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0342 - accuracy: 0.9871 - val_loss: 0.0538 - val_accuracy: 0.9925\n","Epoch 64/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.0470 - accuracy: 0.9871 - val_loss: 0.0564 - val_accuracy: 0.9850\n","Epoch 65/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0359 - accuracy: 0.9903 - val_loss: 0.0559 - val_accuracy: 0.9925\n","Epoch 66/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0307 - accuracy: 0.9919 - val_loss: 0.0583 - val_accuracy: 0.9925\n","Epoch 67/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0337 - accuracy: 0.9871 - val_loss: 0.0565 - val_accuracy: 0.9850\n","Epoch 68/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0425 - accuracy: 0.9871 - val_loss: 0.0511 - val_accuracy: 0.9925\n","Epoch 69/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0233 - accuracy: 0.9919 - val_loss: 0.0627 - val_accuracy: 0.9850\n","Epoch 70/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0354 - accuracy: 0.9887 - val_loss: 0.0559 - val_accuracy: 0.9850\n","Epoch 71/200\n","39/39 [==============================] - 0s 7ms/step - loss: 0.0187 - accuracy: 0.9919 - val_loss: 0.0556 - val_accuracy: 0.9925\n","Epoch 72/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0261 - accuracy: 0.9919 - val_loss: 0.0550 - val_accuracy: 0.9925\n","Epoch 73/200\n","39/39 [==============================] - 0s 9ms/step - loss: 0.0238 - accuracy: 0.9935 - val_loss: 0.0563 - val_accuracy: 0.9925\n","Epoch 74/200\n","39/39 [==============================] - 0s 9ms/step - loss: 0.0350 - accuracy: 0.9871 - val_loss: 0.0601 - val_accuracy: 0.9925\n","Epoch 75/200\n","39/39 [==============================] - 0s 6ms/step - loss: 0.0344 - accuracy: 0.9871 - val_loss: 0.0555 - val_accuracy: 0.9925\n","Epoch 76/200\n","39/39 [==============================] - 0s 8ms/step - loss: 0.0208 - accuracy: 0.9935 - val_loss: 0.0598 - val_accuracy: 0.9925\n","Epoch 77/200\n","39/39 [==============================] - 0s 5ms/step - loss: 0.0328 - accuracy: 0.9887 - val_loss: 0.0530 - val_accuracy: 0.9925\n","Epoch 78/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0284 - accuracy: 0.9919 - val_loss: 0.0533 - val_accuracy: 0.9925\n","Epoch 79/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0204 - accuracy: 0.9903 - val_loss: 0.0501 - val_accuracy: 0.9925\n","Epoch 80/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0233 - accuracy: 0.9887 - val_loss: 0.0526 - val_accuracy: 0.9925\n","Epoch 81/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0221 - accuracy: 0.9919 - val_loss: 0.0507 - val_accuracy: 0.9925\n","Epoch 82/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0207 - accuracy: 0.9903 - val_loss: 0.0553 - val_accuracy: 0.9925\n","Epoch 83/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0341 - accuracy: 0.9887 - val_loss: 0.0530 - val_accuracy: 0.9925\n","Epoch 84/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0331 - accuracy: 0.9887 - val_loss: 0.0546 - val_accuracy: 0.9925\n","Epoch 85/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0207 - accuracy: 0.9935 - val_loss: 0.0595 - val_accuracy: 0.9925\n","Epoch 86/200\n","39/39 [==============================] - 0s 4ms/step - loss: 0.0196 - accuracy: 0.9951 - val_loss: 0.0548 - val_accuracy: 0.9925\n","Epoch 87/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0143 - accuracy: 0.9968 - val_loss: 0.0537 - val_accuracy: 0.9925\n","Epoch 88/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0249 - accuracy: 0.9919 - val_loss: 0.0584 - val_accuracy: 0.9925\n","Epoch 89/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0191 - accuracy: 0.9951 - val_loss: 0.0552 - val_accuracy: 0.9925\n","Epoch 90/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0173 - accuracy: 0.9935 - val_loss: 0.0562 - val_accuracy: 0.9925\n","Epoch 91/200\n","39/39 [==============================] - 0s 4ms/step - loss: 0.0178 - accuracy: 0.9903 - val_loss: 0.0567 - val_accuracy: 0.9925\n","Epoch 92/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0186 - accuracy: 0.9935 - val_loss: 0.0564 - val_accuracy: 0.9925\n","Epoch 93/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0259 - accuracy: 0.9935 - val_loss: 0.0579 - val_accuracy: 0.9925\n","Epoch 94/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0266 - accuracy: 0.9951 - val_loss: 0.0563 - val_accuracy: 0.9925\n","Epoch 95/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0150 - accuracy: 0.9951 - val_loss: 0.0537 - val_accuracy: 0.9925\n","Epoch 96/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0237 - accuracy: 0.9919 - val_loss: 0.0602 - val_accuracy: 0.9925\n","Epoch 97/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0179 - accuracy: 0.9919 - val_loss: 0.0580 - val_accuracy: 0.9925\n","Epoch 98/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0188 - accuracy: 0.9935 - val_loss: 0.0610 - val_accuracy: 0.9925\n","Epoch 99/200\n","39/39 [==============================] - 0s 4ms/step - loss: 0.0145 - accuracy: 0.9935 - val_loss: 0.0539 - val_accuracy: 0.9925\n","Epoch 100/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0191 - accuracy: 0.9919 - val_loss: 0.0611 - val_accuracy: 0.9925\n","Epoch 101/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0153 - accuracy: 0.9935 - val_loss: 0.0568 - val_accuracy: 0.9925\n","Epoch 102/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0119 - accuracy: 0.9968 - val_loss: 0.0593 - val_accuracy: 0.9925\n","Epoch 103/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0186 - accuracy: 0.9919 - val_loss: 0.0599 - val_accuracy: 0.9925\n","Epoch 104/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0177 - accuracy: 0.9968 - val_loss: 0.0606 - val_accuracy: 0.9925\n","Epoch 105/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0088 - accuracy: 0.9968 - val_loss: 0.0615 - val_accuracy: 0.9925\n","Epoch 106/200\n","39/39 [==============================] - 0s 4ms/step - loss: 0.0170 - accuracy: 0.9951 - val_loss: 0.0542 - val_accuracy: 0.9925\n","Epoch 107/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0160 - accuracy: 0.9968 - val_loss: 0.0567 - val_accuracy: 0.9925\n","Epoch 108/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0166 - accuracy: 0.9951 - val_loss: 0.0584 - val_accuracy: 0.9925\n","Epoch 109/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0085 - accuracy: 0.9968 - val_loss: 0.0606 - val_accuracy: 0.9925\n","Epoch 110/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0186 - accuracy: 0.9919 - val_loss: 0.0589 - val_accuracy: 0.9925\n","Epoch 111/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0091 - accuracy: 0.9984 - val_loss: 0.0587 - val_accuracy: 0.9925\n","Epoch 112/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0124 - accuracy: 0.9951 - val_loss: 0.0590 - val_accuracy: 0.9925\n","Epoch 113/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0098 - accuracy: 0.9984 - val_loss: 0.0637 - val_accuracy: 0.9925\n","Epoch 114/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0136 - accuracy: 0.9984 - val_loss: 0.0547 - val_accuracy: 0.9925\n","Epoch 115/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0161 - accuracy: 0.9951 - val_loss: 0.0578 - val_accuracy: 0.9925\n","Epoch 116/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0175 - accuracy: 0.9919 - val_loss: 0.0604 - val_accuracy: 0.9925\n","Epoch 117/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0118 - accuracy: 0.9951 - val_loss: 0.0571 - val_accuracy: 0.9925\n","Epoch 118/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0147 - accuracy: 0.9935 - val_loss: 0.0584 - val_accuracy: 0.9925\n","Epoch 119/200\n","39/39 [==============================] - 0s 4ms/step - loss: 0.0095 - accuracy: 0.9984 - val_loss: 0.0597 - val_accuracy: 0.9925\n","Epoch 120/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0049 - accuracy: 0.9984 - val_loss: 0.0630 - val_accuracy: 0.9925\n","Epoch 121/200\n","39/39 [==============================] - 0s 4ms/step - loss: 0.0178 - accuracy: 0.9951 - val_loss: 0.0580 - val_accuracy: 0.9925\n","Epoch 122/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0138 - accuracy: 0.9968 - val_loss: 0.0557 - val_accuracy: 0.9925\n","Epoch 123/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0111 - accuracy: 0.9984 - val_loss: 0.0582 - val_accuracy: 0.9925\n","Epoch 124/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0096 - accuracy: 0.9968 - val_loss: 0.0611 - val_accuracy: 0.9925\n","Epoch 125/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0160 - accuracy: 0.9951 - val_loss: 0.0668 - val_accuracy: 0.9925\n","Epoch 126/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0174 - accuracy: 0.9951 - val_loss: 0.0746 - val_accuracy: 0.9925\n","Epoch 127/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0197 - accuracy: 0.9951 - val_loss: 0.0837 - val_accuracy: 0.9774\n","Epoch 128/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0166 - accuracy: 0.9951 - val_loss: 0.0647 - val_accuracy: 0.9925\n","Epoch 129/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0136 - accuracy: 0.9968 - val_loss: 0.0703 - val_accuracy: 0.9850\n","Epoch 130/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0133 - accuracy: 0.9951 - val_loss: 0.0743 - val_accuracy: 0.9925\n","Epoch 131/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0335 - accuracy: 0.9871 - val_loss: 0.0650 - val_accuracy: 0.9925\n","Epoch 132/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0078 - accuracy: 0.9968 - val_loss: 0.0658 - val_accuracy: 0.9925\n","Epoch 133/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0115 - accuracy: 0.9935 - val_loss: 0.0659 - val_accuracy: 0.9925\n","Epoch 134/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0127 - accuracy: 0.9951 - val_loss: 0.0629 - val_accuracy: 0.9925\n","Epoch 135/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0252 - accuracy: 0.9935 - val_loss: 0.0682 - val_accuracy: 0.9925\n","Epoch 136/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0093 - accuracy: 0.9968 - val_loss: 0.0684 - val_accuracy: 0.9925\n","Epoch 137/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0131 - accuracy: 0.9968 - val_loss: 0.0655 - val_accuracy: 0.9925\n","Epoch 138/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0129 - accuracy: 0.9951 - val_loss: 0.0710 - val_accuracy: 0.9925\n","Epoch 139/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0133 - accuracy: 0.9935 - val_loss: 0.0726 - val_accuracy: 0.9850\n","Epoch 140/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0078 - accuracy: 0.9968 - val_loss: 0.0692 - val_accuracy: 0.9925\n","Epoch 141/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0136 - accuracy: 0.9935 - val_loss: 0.0704 - val_accuracy: 0.9925\n","Epoch 142/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0138 - accuracy: 0.9968 - val_loss: 0.0659 - val_accuracy: 0.9925\n","Epoch 143/200\n","39/39 [==============================] - 0s 4ms/step - loss: 0.0202 - accuracy: 0.9919 - val_loss: 0.0662 - val_accuracy: 0.9925\n","Epoch 144/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0313 - accuracy: 0.9903 - val_loss: 0.0683 - val_accuracy: 0.9925\n","Epoch 145/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0115 - accuracy: 0.9984 - val_loss: 0.0709 - val_accuracy: 0.9925\n","Epoch 146/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0181 - accuracy: 0.9919 - val_loss: 0.0704 - val_accuracy: 0.9925\n","Epoch 147/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0191 - accuracy: 0.9919 - val_loss: 0.0825 - val_accuracy: 0.9925\n","Epoch 148/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0165 - accuracy: 0.9951 - val_loss: 0.0681 - val_accuracy: 0.9925\n","Epoch 149/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0080 - accuracy: 1.0000 - val_loss: 0.0718 - val_accuracy: 0.9925\n","Epoch 150/200\n","39/39 [==============================] - 0s 4ms/step - loss: 0.0240 - accuracy: 0.9903 - val_loss: 0.0724 - val_accuracy: 0.9925\n","Epoch 151/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0112 - accuracy: 0.9951 - val_loss: 0.0772 - val_accuracy: 0.9925\n","Epoch 152/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0102 - accuracy: 0.9968 - val_loss: 0.0729 - val_accuracy: 0.9925\n","Epoch 153/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0060 - accuracy: 0.9984 - val_loss: 0.0738 - val_accuracy: 0.9925\n","Epoch 154/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0062 - accuracy: 0.9968 - val_loss: 0.0734 - val_accuracy: 0.9925\n","Epoch 155/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0065 - accuracy: 0.9984 - val_loss: 0.0890 - val_accuracy: 0.9850\n","Epoch 156/200\n","39/39 [==============================] - 0s 4ms/step - loss: 0.0190 - accuracy: 0.9919 - val_loss: 0.0787 - val_accuracy: 0.9925\n","Epoch 157/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0088 - accuracy: 0.9968 - val_loss: 0.0723 - val_accuracy: 0.9925\n","Epoch 158/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0044 - accuracy: 1.0000 - val_loss: 0.0763 - val_accuracy: 0.9925\n","Epoch 159/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0065 - accuracy: 0.9984 - val_loss: 0.0775 - val_accuracy: 0.9925\n","Epoch 160/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0018 - accuracy: 1.0000 - val_loss: 0.0772 - val_accuracy: 0.9925\n","Epoch 161/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0093 - accuracy: 0.9968 - val_loss: 0.0723 - val_accuracy: 0.9925\n","Epoch 162/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0085 - accuracy: 0.9968 - val_loss: 0.0746 - val_accuracy: 0.9925\n","Epoch 163/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0078 - accuracy: 0.9984 - val_loss: 0.0740 - val_accuracy: 0.9925\n","Epoch 164/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0068 - accuracy: 0.9984 - val_loss: 0.0777 - val_accuracy: 0.9925\n","Epoch 165/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0084 - accuracy: 0.9984 - val_loss: 0.0833 - val_accuracy: 0.9925\n","Epoch 166/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0105 - accuracy: 0.9951 - val_loss: 0.0801 - val_accuracy: 0.9925\n","Epoch 167/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0062 - accuracy: 0.9984 - val_loss: 0.0900 - val_accuracy: 0.9850\n","Epoch 168/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0219 - accuracy: 0.9935 - val_loss: 0.0743 - val_accuracy: 0.9925\n","Epoch 169/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0085 - accuracy: 0.9984 - val_loss: 0.0719 - val_accuracy: 0.9925\n","Epoch 170/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0147 - accuracy: 0.9968 - val_loss: 0.0701 - val_accuracy: 0.9925\n","Epoch 171/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0124 - accuracy: 0.9968 - val_loss: 0.0683 - val_accuracy: 0.9925\n","Epoch 172/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0179 - accuracy: 0.9951 - val_loss: 0.0702 - val_accuracy: 0.9925\n","Epoch 173/200\n","39/39 [==============================] - 0s 4ms/step - loss: 0.0092 - accuracy: 0.9951 - val_loss: 0.0754 - val_accuracy: 0.9925\n","Epoch 174/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0235 - accuracy: 0.9919 - val_loss: 0.0887 - val_accuracy: 0.9850\n","Epoch 175/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0066 - accuracy: 0.9984 - val_loss: 0.0706 - val_accuracy: 0.9925\n","Epoch 176/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0070 - accuracy: 0.9968 - val_loss: 0.0668 - val_accuracy: 0.9925\n","Epoch 177/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0139 - accuracy: 0.9935 - val_loss: 0.0693 - val_accuracy: 0.9925\n","Epoch 178/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0066 - accuracy: 0.9984 - val_loss: 0.0720 - val_accuracy: 0.9925\n","Epoch 179/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0221 - accuracy: 0.9951 - val_loss: 0.0670 - val_accuracy: 0.9925\n","Epoch 180/200\n","39/39 [==============================] - 0s 4ms/step - loss: 0.0110 - accuracy: 0.9951 - val_loss: 0.0819 - val_accuracy: 0.9850\n","Epoch 181/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0082 - accuracy: 0.9968 - val_loss: 0.0756 - val_accuracy: 0.9925\n","Epoch 182/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0151 - accuracy: 0.9968 - val_loss: 0.0672 - val_accuracy: 0.9925\n","Epoch 183/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0053 - accuracy: 1.0000 - val_loss: 0.0703 - val_accuracy: 0.9925\n","Epoch 184/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0069 - accuracy: 0.9984 - val_loss: 0.0685 - val_accuracy: 0.9925\n","Epoch 185/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0032 - accuracy: 1.0000 - val_loss: 0.0689 - val_accuracy: 0.9925\n","Epoch 186/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0082 - accuracy: 0.9968 - val_loss: 0.0723 - val_accuracy: 0.9925\n","Epoch 187/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0128 - accuracy: 0.9951 - val_loss: 0.0731 - val_accuracy: 0.9925\n","Epoch 188/200\n","39/39 [==============================] - 0s 4ms/step - loss: 0.0052 - accuracy: 0.9984 - val_loss: 0.0767 - val_accuracy: 0.9925\n","Epoch 189/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0045 - accuracy: 0.9984 - val_loss: 0.0767 - val_accuracy: 0.9925\n","Epoch 190/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0124 - accuracy: 0.9951 - val_loss: 0.0793 - val_accuracy: 0.9925\n","Epoch 191/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0272 - accuracy: 0.9887 - val_loss: 0.0718 - val_accuracy: 0.9925\n","Epoch 192/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0111 - accuracy: 0.9935 - val_loss: 0.0747 - val_accuracy: 0.9925\n","Epoch 193/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0165 - accuracy: 0.9935 - val_loss: 0.0716 - val_accuracy: 0.9925\n","Epoch 194/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0151 - accuracy: 0.9935 - val_loss: 0.0784 - val_accuracy: 0.9925\n","Epoch 195/200\n","39/39 [==============================] - 0s 4ms/step - loss: 0.0093 - accuracy: 0.9984 - val_loss: 0.0791 - val_accuracy: 0.9925\n","Epoch 196/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0114 - accuracy: 0.9968 - val_loss: 0.0732 - val_accuracy: 0.9925\n","Epoch 197/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0181 - accuracy: 0.9951 - val_loss: 0.0853 - val_accuracy: 0.9850\n","Epoch 198/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0040 - accuracy: 0.9984 - val_loss: 0.0750 - val_accuracy: 0.9925\n","Epoch 199/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0062 - accuracy: 0.9984 - val_loss: 0.0749 - val_accuracy: 0.9925\n","Epoch 200/200\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0054 - accuracy: 0.9984 - val_loss: 0.0783 - val_accuracy: 0.9925\n"]}]},{"cell_type":"code","source":["print(\"Evaluate on test data\")\n","results = model.evaluate(X_test, y_test, batch_size=32)\n","print(\"test loss, test acc:\", results)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YOyDDFql4YkD","executionInfo":{"status":"ok","timestamp":1653800757841,"user_tz":-420,"elapsed":452,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"c5356ce6-f46f-4926-cd96-abe43d34f126"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["Evaluate on test data\n","5/5 [==============================] - 0s 3ms/step - loss: 0.1553 - accuracy: 0.9545\n","test loss, test acc: [0.15527038276195526, 0.9545454382896423]\n"]}]},{"cell_type":"code","source":["# test the model prediction\n","\n","for file in glob.glob(not_situp_folder)[:3]:\n","    image = cv2.imread(file)\n","    keypoints = processPose(image).flatten().reshape(1, 51)\n","    predd = model.predict(keypoints)\n","    posee = np.argmax(predd)\n","    confidence = predd[0][posee]\n","    print(predd)\n","    print(posee)\n","    print(confidence)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4IVTqFkMECuG","executionInfo":{"status":"ok","timestamp":1653800784406,"user_tz":-420,"elapsed":437,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"306581fe-7de6-4d26-fbfb-75c331c7d94b"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1. 0.]]\n","0\n","1.0\n","[[1. 0.]]\n","0\n","1.0\n","[[1.000000e+00 6.423164e-19]]\n","0\n","1.0\n"]}]},{"cell_type":"code","source":["image = cv2.imread('/content/003_e63ed852-reversed.jpg')\n","keypoints = processPose(image).flatten().reshape(1, 51)\n","predd = model.predict(keypoints)\n","posee = np.argmax(predd)\n","confidence = predd[0][posee]\n","print(predd)\n","print(posee)\n","print(confidence)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lj6H-wWOYV7S","executionInfo":{"status":"ok","timestamp":1653800854616,"user_tz":-420,"elapsed":333,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"a0442e11-5777-4574-d824-b368e7a0a6e9"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1. 0.]]\n","0\n","1.0\n"]}]},{"cell_type":"markdown","source":["## 3. Save The Model"],"metadata":{"id":"rSBstkcD_nva"}},{"cell_type":"code","source":["!pip install pyyaml h5py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mhOe3RvD_sz6","executionInfo":{"status":"ok","timestamp":1653800869578,"user_tz":-420,"elapsed":3326,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"8fc72038-a0bb-49bc-ebda-0a5d6f2cfa42"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (3.13)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.7/dist-packages (3.1.0)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py) (1.5.2)\n","Requirement already satisfied: numpy>=1.14.5 in /usr/local/lib/python3.7/dist-packages (from h5py) (1.21.6)\n"]}]},{"cell_type":"code","source":["model.save('situp-model-28may22.h5')"],"metadata":{"id":"DdM8p7nWBmDQ","executionInfo":{"status":"ok","timestamp":1653800883642,"user_tz":-420,"elapsed":441,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":44,"outputs":[]},{"cell_type":"markdown","source":["## 4. Convert to TFlite"],"metadata":{"id":"dUEal5PAiwsW"}},{"cell_type":"code","source":["converter = tf.lite.TFLiteConverter.from_keras_model(model)\n","tflite_model = converter.convert()\n","\n","with open('situp-model-28may22.tflite', 'wb') as f:\n","  f.write(tflite_model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N8bGSSWYi5PH","executionInfo":{"status":"ok","timestamp":1653800903883,"user_tz":-420,"elapsed":7487,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"a32b9ff0-9e2a-4e67-c041-669c75a399c9"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["INFO:tensorflow:Assets written to: /tmp/tmpnya_qusg/assets\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:Buffer deduplication procedure will be skipped when flatbuffer library is not properly loaded\n"]}]}]}