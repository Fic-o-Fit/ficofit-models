{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Capstone - Sit Up Detector","provenance":[{"file_id":"1BQNF_CD-36vpeI--L1pI0-uJPMMyxfmd","timestamp":1653797004984},{"file_id":"1J8E2UZoWUZcd5mp6brqSD_-gpqaWonMa","timestamp":1651865637744}],"collapsed_sections":[],"mount_file_id":"1J8E2UZoWUZcd5mp6brqSD_-gpqaWonMa","authorship_tag":"ABX9TyMfmiimTRppLWOdtKOdCKp4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 💪🏽**Sit Up Detector**💦✨\n","\n","This notebook is presented to you by Bangkit Team C22-PS072's ML Squad💖:\n","\n","\n","*   Deandra Setyaputri - M2010F1120\n","*   Wilma Elysia - M7013F1348\n","\n"],"metadata":{"id":"3YSzRfpc5NnJ"}},{"cell_type":"markdown","source":["## 0. Manage Dependencies"],"metadata":{"id":"tiI0kJBbwui0"}},{"cell_type":"code","source":["!pip install tensorflow tensorflow-gpu opencv-python matplotlib sklearn"],"metadata":{"id":"KZVy7KhvXSAN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654017778923,"user_tz":-420,"elapsed":124012,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"ceec1848-ea5d-443a-8b4e-e15cbd322541"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.7/dist-packages (2.8.0+zzzcolab20220506162203)\n","Collecting tensorflow-gpu\n","  Downloading tensorflow_gpu-2.9.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (511.7 MB)\n","\u001b[K     |████████████████████████████████| 511.7 MB 5.6 kB/s \n","\u001b[?25hRequirement already satisfied: opencv-python in /usr/local/lib/python3.7/dist-packages (4.1.2.30)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (3.2.2)\n","Requirement already satisfied: sklearn in /usr/local/lib/python3.7/dist-packages (0.0)\n","Requirement already satisfied: absl-py>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.0.0)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.14.1)\n","Requirement already satisfied: gast>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (0.5.3)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.46.1)\n","Requirement already satisfied: keras-preprocessing>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.1.2)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (0.26.0)\n","Requirement already satisfied: flatbuffers>=1.12 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.0)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.15.0)\n","Requirement already satisfied: keras<2.9,>=2.8.0rc0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.8.0)\n","Requirement already satisfied: protobuf>=3.9.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (3.17.3)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (4.2.0)\n","Requirement already satisfied: tensorboard<2.9,>=2.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.8.0)\n","Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.21.6)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (3.1.0)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (3.3.0)\n","Collecting tf-estimator-nightly==2.8.0.dev2021122109\n","  Downloading tf_estimator_nightly-2.8.0.dev2021122109-py2.py3-none-any.whl (462 kB)\n","\u001b[K     |████████████████████████████████| 462 kB 53.8 MB/s \n","\u001b[?25hRequirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.1.0)\n","Requirement already satisfied: libclang>=9.0.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (14.0.1)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from tensorflow) (57.4.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.7/dist-packages (from astunparse>=1.6.0->tensorflow) (0.37.1)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py>=2.9.0->tensorflow) (1.5.2)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (1.0.1)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (1.8.1)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (0.4.6)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (1.35.0)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (2.23.0)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (0.6.1)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (3.3.7)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (4.8)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (4.2.4)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (0.2.8)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow) (1.3.1)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard<2.9,>=2.8->tensorflow) (4.11.3)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.9,>=2.8->tensorflow) (3.8.0)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (0.4.8)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (2022.5.18.1)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (2.10)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow) (3.2.0)\n","Collecting tensorflow-gpu\n","  Downloading tensorflow_gpu-2.9.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (511.7 MB)\n","\u001b[K     |████████████████████████████████| 511.7 MB 4.9 kB/s \n","\u001b[?25h  Downloading tensorflow_gpu-2.8.2-cp37-cp37m-manylinux2010_x86_64.whl (497.9 MB)\n","\u001b[K     |████████████████████████████████| 497.9 MB 17 kB/s \n","\u001b[?25hRequirement already satisfied: tensorflow-estimator<2.9,>=2.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu) (2.8.0)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (3.0.9)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (1.4.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (0.11.0)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from sklearn) (1.0.2)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->sklearn) (1.4.1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->sklearn) (3.1.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->sklearn) (1.1.0)\n","Installing collected packages: tf-estimator-nightly, tensorflow-gpu\n","Successfully installed tensorflow-gpu-2.8.2 tf-estimator-nightly-2.8.0.dev2021122109\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","import glob\n","import cv2\n","import os\n","import enum\n","import tensorflow as tf\n","from tensorflow import keras"],"metadata":{"id":"hQly5z6WydbC","executionInfo":{"status":"ok","timestamp":1654017782472,"user_tz":-420,"elapsed":3577,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["## 1. Preprocess Input Images\n","First, create a copy of every image data where they are flipped horizontally so that the model can accurately detect push-up poses regardless if the user is facing left or right."],"metadata":{"id":"dspDqEBd_Vq6"}},{"cell_type":"code","source":["from google.colab import drive\n","\n","drive.mount(\"/content/drive\") \n","root = \"/content/drive/My Drive/ml-gdrive/Datasets/\"\n","\n","not_situp_folder = root + \"random_poses\" + \"/*.*\"\n","situp_folder = root + \"situp\" + \"/*.*\"\n","movenet_folder = \"/content/drive/My Drive/ml-gdrive/Models/lite-model_movenet_singlepose_lightning_3.tflite\""],"metadata":{"id":"qNz5rgwh_eZT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654017810813,"user_tz":-420,"elapsed":28354,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"d689df74-2ac8-448d-8c2e-5c6f4f4ae0bb"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["def flip_img_folder(folder):\n","    for file in glob.glob(folder):\n","        image = cv2.imread(file)\n","        flipped_img_path = file[:-4] + \"-reversed.\" + file[-3:]\n","        # file[:-4] is the name of the path and image name without the .jpg or .png extension\n","\n","        if(file[-13:-4] != \"-reversed\" and os.path.exists(flipped_img_path) == False):\n","            flipped_img = cv2.flip(image, 1)\n","            cv2.imwrite(flipped_img_path, flipped_img)"],"metadata":{"id":"WmgnqaZxEKga"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# flip_img_folder(pushup_up_folder)\n","# flip_img_folder(pushup_down_folder)\n","flip_img_folder(situp_folder)"],"metadata":{"id":"t5R58Me4PnZm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["We will convert all the image data to arrays of landmarks representing the human pose in each image. Then create a csv file containing those data to be used in training later."],"metadata":{"id":"tV_qwPJfD9qX"}},{"cell_type":"code","source":["interpreter = tf.lite.Interpreter(model_path=movenet_folder)\n","interpreter.allocate_tensors()"],"metadata":{"id":"gPZK5IHId-ot","executionInfo":{"status":"ok","timestamp":1654017861015,"user_tz":-420,"elapsed":322,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["def processPose(image):\n","    img = tf.image.resize_with_pad(np.expand_dims(image, axis=0), 192,192)\n","    img = tf.cast(img, dtype=tf.float32)\n","    input_details = interpreter.get_input_details()\n","    output_details = interpreter.get_output_details()\n","    interpreter.set_tensor(input_details[0]['index'], np.array(img))\n","    # Invoke inference.\n","    interpreter.invoke()\n","    # Get the model prediction.\n","    keypoints_with_scores = interpreter.get_tensor(output_details[0]['index'])\n","    keypoints = keypoints_with_scores.flatten().reshape(17,3)\n","    fixed_keypoints = []\n","    for [x, y, score] in keypoints:\n","        if score < 0.2:\n","            fixed_keypoints.append([0, 0, 0])\n","        else:\n","            fixed_keypoints.append([x, y, score])\n","    return np.array(fixed_keypoints)"],"metadata":{"id":"tAnE2ZRkYdVn","executionInfo":{"status":"ok","timestamp":1654017862626,"user_tz":-420,"elapsed":5,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["### Trying out the process"],"metadata":{"id":"Z-tsIhlPBKBy"}},{"cell_type":"code","source":["# # trying out the mechanism\n","# for file in glob.glob(pushup_up_folder):\n","#     img = cv2.imread(file)\n","#     keypoints = processPose(img).flatten().reshape(17, 3)\n","    \n","#     break\n","# img = cv2.imread('/content/800px-A_black_image.jpg')\n","# keypoints = processPose(img).flatten().reshape(17, 3)\n","# fixed_keypoints = []\n","# for [x, y, score] in keypoints:\n","#     if score < 0.2:\n","#         fixed_keypoints.append([0, 0, 0])\n","#     else:\n","#         fixed_keypoints.append([x, y, score])\n","# print(fixed_keypoints)\n","#     # landmarks = np.array([[res.x, res.y, res.z, res.visibility] for res in results.pose_world_landmarks.landmark]).flatten()\n","#     # print(landmarks)"],"metadata":{"id":"2770Ruv2SKiD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Enum and Function Definitions"],"metadata":{"id":"BcXYidhjBj5Q"}},{"cell_type":"code","source":["# Source: the Movenet TFLite Documentation\n","class BodyPart(enum.Enum):\n","  \"\"\"Enum representing human body keypoints detected by pose estimation models.\"\"\"\n","  NOSE = 0\n","  LEFT_EYE = 1\n","  RIGHT_EYE = 2\n","  LEFT_EAR = 3\n","  RIGHT_EAR = 4\n","  LEFT_SHOULDER = 5\n","  RIGHT_SHOULDER = 6\n","  LEFT_ELBOW = 7\n","  RIGHT_ELBOW = 8\n","  LEFT_WRIST = 9\n","  RIGHT_WRIST = 10\n","  LEFT_HIP = 11\n","  RIGHT_HIP = 12\n","  LEFT_KNEE = 13\n","  RIGHT_KNEE = 14\n","  LEFT_ANKLE = 15\n","  RIGHT_ANKLE = 16"],"metadata":{"id":"Nmph4npajY0U","executionInfo":{"status":"ok","timestamp":1654017865362,"user_tz":-420,"elapsed":357,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","execution_count":7,"metadata":{"id":"HgQMdfeT65Z5","executionInfo":{"status":"ok","timestamp":1654017867913,"user_tz":-420,"elapsed":350,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"outputs":[],"source":["# These are a set of functions to preprocess the input data before classification\n","# Source: the Movenet TFLite Documentation\n","\n","def get_center_point(landmarks, left_bodypart, right_bodypart):\n","  \"\"\"Calculates the center point of the two given landmarks.\"\"\"\n","\n","  left = tf.gather(landmarks, left_bodypart.value, axis=1)\n","  right = tf.gather(landmarks, right_bodypart.value, axis=1)\n","  center = left * 0.5 + right * 0.5\n","  return center\n","\n","\n","def get_pose_size(landmarks, torso_size_multiplier=2.5):\n","  \"\"\"Calculates pose size.\n","\n","  It is the maximum of two values:\n","    * Torso size multiplied by `torso_size_multiplier`\n","    * Maximum distance from pose center to any pose landmark\n","  \"\"\"\n","  # Hips center\n","  hips_center = get_center_point(landmarks, BodyPart.LEFT_HIP, \n","                                 BodyPart.RIGHT_HIP)\n","\n","  # Shoulders center\n","  shoulders_center = get_center_point(landmarks, BodyPart.LEFT_SHOULDER,\n","                                      BodyPart.RIGHT_SHOULDER)\n","\n","  # Torso size as the minimum body size\n","  torso_size = tf.linalg.norm(shoulders_center - hips_center)\n","\n","  # Pose center\n","  pose_center_new = get_center_point(landmarks, BodyPart.LEFT_HIP, \n","                                     BodyPart.RIGHT_HIP)\n","  pose_center_new = tf.expand_dims(pose_center_new, axis=1)\n","  # Broadcast the pose center to the same size as the landmark vector to\n","  # perform substraction\n","  pose_center_new = tf.broadcast_to(pose_center_new,\n","                                    [tf.size(landmarks) // (17*2), 17, 2])\n","\n","  # Dist to pose center\n","  d = tf.gather(landmarks - pose_center_new, 0, axis=0,\n","                name=\"dist_to_pose_center\")\n","  # Max dist to pose center\n","  max_dist = tf.reduce_max(tf.linalg.norm(d, axis=0))\n","\n","  # Normalize scale\n","  pose_size = tf.maximum(torso_size * torso_size_multiplier, max_dist)\n","\n","  return pose_size\n","\n","\n","def normalize_pose_landmarks(landmarks):\n","  \"\"\"Normalizes the landmarks translation by moving the pose center to (0,0) and\n","  scaling it to a constant pose size.\n","  \"\"\"\n","  # Move landmarks so that the pose center becomes (0,0)\n","  pose_center = get_center_point(landmarks, BodyPart.LEFT_HIP, \n","                                 BodyPart.RIGHT_HIP)\n","  pose_center = tf.expand_dims(pose_center, axis=1)\n","  # Broadcast the pose center to the same size as the landmark vector to perform\n","  # substraction\n","  pose_center = tf.broadcast_to(pose_center, \n","                                [tf.size(landmarks) // (17*2), 17, 2])\n","  landmarks = landmarks - pose_center\n","\n","  # Scale the landmarks to a constant pose size\n","  pose_size = get_pose_size(landmarks)\n","  landmarks /= pose_size\n","\n","  return landmarks\n","\n","\n","def landmarks_to_embedding(landmarks_and_scores):\n","  \"\"\"Converts the input landmarks into a pose embedding.\"\"\"\n","  # Reshape the flat input into a matrix with shape=(17, 3)\n","  reshaped_inputs = keras.layers.Reshape((17, 3))(landmarks_and_scores)\n","\n","  # Normalize landmarks 2D\n","  landmarks = normalize_pose_landmarks(reshaped_inputs[:, :, :2])\n","\n","  # Flatten the normalized landmark coordinates into a vector\n","  embedding = keras.layers.Flatten()(landmarks)\n","\n","  return embedding"]},{"cell_type":"markdown","source":["## 2. Create Dataset"],"metadata":{"id":"Pla4feGBBxwl"}},{"cell_type":"code","source":["def detect_pose_from_folder(folder, folder_label):\n","    landmarks = []\n","    labels = []\n","    for file in glob.glob(folder):\n","        image = cv2.imread(file)\n","        keypoints = processPose(image).flatten()\n","        if len(keypoints)!=0:\n","            landmarks.append(keypoints)\n","            labels.append(folder_label)\n","    return landmarks, labels"],"metadata":{"id":"9EXF5IfUhpG8","executionInfo":{"status":"ok","timestamp":1654017871804,"user_tz":-420,"elapsed":319,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# '1' is the label for the sit up movement\n","not_situp_landmarks, not_situp_labels = detect_pose_from_folder(not_situp_folder, 0)\n","situp_landmarks, situp_labels = detect_pose_from_folder(situp_folder, 1)"],"metadata":{"id":"FpKtOMcMZle5","executionInfo":{"status":"ok","timestamp":1654017908131,"user_tz":-420,"elapsed":34439,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["landmarks = not_situp_landmarks + situp_landmarks\n","labels = not_situp_labels + situp_labels"],"metadata":{"id":"B4lovPOAevDy","executionInfo":{"status":"ok","timestamp":1654017908132,"user_tz":-420,"elapsed":36,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["print(len(landmarks))\n","print(len(labels))"],"metadata":{"id":"1jh-UB9tg9uz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654017908133,"user_tz":-420,"elapsed":35,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"69d525bb-43a1-45b5-b72e-fb2cbbb4fe4b"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["883\n","883\n"]}]},{"cell_type":"code","source":["import random\n","\n","X = np.array(landmarks)\n","y = np.array(labels)\n","dataset = [(X[i], y[i]) for i in range(0, len(labels))]\n","random.shuffle(dataset)\n","X.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RCrpQ0hbqs6Q","executionInfo":{"status":"ok","timestamp":1654017908135,"user_tz":-420,"elapsed":18,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"b9ac4112-d94c-4281-e3be-62f0d69909c8"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(883, 51)"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["import csv\n","\n","# open the file in the write mode\n","with open('/content/drive/My Drive/ml-gdrive/Datasets/situp_dataset_movenet-29may22', 'w') as f:\n","    # create the csv writer\n","    writer = csv.writer(f)\n","\n","    # write the header to the csv file\n","    writer.writerow(['situp_pose', 'pose_landmarks'])\n","\n","    for landmark, label in dataset:\n","        writer.writerow([label, landmark])"],"metadata":{"id":"tgqCaUGSa5nv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 3. Train Model"],"metadata":{"id":"SCvb0Duits5j"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"1Pte6b1bgWKv"},"outputs":[],"source":["# Define the model\n","inputs = tf.keras.Input(shape=(51))  # from 17*3\n","embedding = landmarks_to_embedding(inputs)\n","\n","layer = keras.layers.Dense(128, activation=tf.nn.relu6)(embedding)\n","layer = keras.layers.Dropout(0.5)(layer)\n","layer = keras.layers.Dense(64, activation=tf.nn.relu6)(layer)\n","layer = keras.layers.Dropout(0.5)(layer)\n","outputs = keras.layers.Dense(2, activation=\"sigmoid\")(layer)\n","\n","model = keras.Model(inputs, outputs, name=\"situpdetector\")\n","model.summary()"]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n","X_test, X_val, y_test, y_val = train_test_split(X_test, y_test, test_size=0.5)"],"metadata":{"id":"kdtSr2kPwoEr","executionInfo":{"status":"ok","timestamp":1654018146563,"user_tz":-420,"elapsed":333,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["model.compile(\n","    optimizer='adam',\n","    loss='sparse_categorical_crossentropy',\n","    metrics=['accuracy']\n",")\n","\n","history = model.fit(X_train, y_train,\n","                    epochs=300,\n","                    batch_size=16,\n","                    validation_data=(X_val, y_val))"],"metadata":{"id":"K8I9vzbs2uC9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654018208553,"user_tz":-420,"elapsed":41875,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"9fc840e2-5088-48eb-d2ec-139eeec87937"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/300\n","39/39 [==============================] - 1s 9ms/step - loss: 0.6377 - accuracy: 0.6699 - val_loss: 0.5840 - val_accuracy: 0.7895\n","Epoch 2/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.5313 - accuracy: 0.7638 - val_loss: 0.4678 - val_accuracy: 0.7970\n","Epoch 3/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.4182 - accuracy: 0.8430 - val_loss: 0.3657 - val_accuracy: 0.8421\n","Epoch 4/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.3275 - accuracy: 0.8883 - val_loss: 0.2858 - val_accuracy: 0.8722\n","Epoch 5/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.2777 - accuracy: 0.8964 - val_loss: 0.2393 - val_accuracy: 0.9023\n","Epoch 6/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.2184 - accuracy: 0.9353 - val_loss: 0.2069 - val_accuracy: 0.9023\n","Epoch 7/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.2107 - accuracy: 0.9401 - val_loss: 0.1923 - val_accuracy: 0.9248\n","Epoch 8/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.1829 - accuracy: 0.9434 - val_loss: 0.1780 - val_accuracy: 0.9248\n","Epoch 9/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.1462 - accuracy: 0.9498 - val_loss: 0.1688 - val_accuracy: 0.9323\n","Epoch 10/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.1579 - accuracy: 0.9595 - val_loss: 0.1687 - val_accuracy: 0.9248\n","Epoch 11/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.1368 - accuracy: 0.9612 - val_loss: 0.1556 - val_accuracy: 0.9398\n","Epoch 12/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.1320 - accuracy: 0.9628 - val_loss: 0.1502 - val_accuracy: 0.9398\n","Epoch 13/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.1147 - accuracy: 0.9676 - val_loss: 0.1512 - val_accuracy: 0.9323\n","Epoch 14/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.1284 - accuracy: 0.9595 - val_loss: 0.1458 - val_accuracy: 0.9398\n","Epoch 15/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.1139 - accuracy: 0.9579 - val_loss: 0.1473 - val_accuracy: 0.9323\n","Epoch 16/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0997 - accuracy: 0.9676 - val_loss: 0.1439 - val_accuracy: 0.9398\n","Epoch 17/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.1036 - accuracy: 0.9709 - val_loss: 0.1482 - val_accuracy: 0.9323\n","Epoch 18/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0956 - accuracy: 0.9709 - val_loss: 0.1409 - val_accuracy: 0.9398\n","Epoch 19/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0921 - accuracy: 0.9725 - val_loss: 0.1438 - val_accuracy: 0.9323\n","Epoch 20/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.1048 - accuracy: 0.9660 - val_loss: 0.1296 - val_accuracy: 0.9549\n","Epoch 21/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0861 - accuracy: 0.9725 - val_loss: 0.1409 - val_accuracy: 0.9398\n","Epoch 22/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0734 - accuracy: 0.9773 - val_loss: 0.1343 - val_accuracy: 0.9474\n","Epoch 23/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0805 - accuracy: 0.9725 - val_loss: 0.1264 - val_accuracy: 0.9549\n","Epoch 24/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0723 - accuracy: 0.9790 - val_loss: 0.1316 - val_accuracy: 0.9624\n","Epoch 25/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0651 - accuracy: 0.9790 - val_loss: 0.1409 - val_accuracy: 0.9398\n","Epoch 26/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0638 - accuracy: 0.9741 - val_loss: 0.1425 - val_accuracy: 0.9398\n","Epoch 27/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0709 - accuracy: 0.9725 - val_loss: 0.1277 - val_accuracy: 0.9474\n","Epoch 28/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0814 - accuracy: 0.9773 - val_loss: 0.1258 - val_accuracy: 0.9624\n","Epoch 29/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0672 - accuracy: 0.9741 - val_loss: 0.1197 - val_accuracy: 0.9549\n","Epoch 30/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0555 - accuracy: 0.9822 - val_loss: 0.1266 - val_accuracy: 0.9549\n","Epoch 31/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0682 - accuracy: 0.9773 - val_loss: 0.1338 - val_accuracy: 0.9474\n","Epoch 32/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0618 - accuracy: 0.9757 - val_loss: 0.1355 - val_accuracy: 0.9624\n","Epoch 33/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0537 - accuracy: 0.9854 - val_loss: 0.1342 - val_accuracy: 0.9549\n","Epoch 34/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0616 - accuracy: 0.9773 - val_loss: 0.1402 - val_accuracy: 0.9474\n","Epoch 35/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0461 - accuracy: 0.9854 - val_loss: 0.1402 - val_accuracy: 0.9549\n","Epoch 36/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0530 - accuracy: 0.9854 - val_loss: 0.1377 - val_accuracy: 0.9474\n","Epoch 37/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0438 - accuracy: 0.9871 - val_loss: 0.1369 - val_accuracy: 0.9624\n","Epoch 38/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0581 - accuracy: 0.9790 - val_loss: 0.1345 - val_accuracy: 0.9699\n","Epoch 39/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0390 - accuracy: 0.9854 - val_loss: 0.1355 - val_accuracy: 0.9549\n","Epoch 40/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0341 - accuracy: 0.9903 - val_loss: 0.1302 - val_accuracy: 0.9549\n","Epoch 41/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0377 - accuracy: 0.9935 - val_loss: 0.1493 - val_accuracy: 0.9398\n","Epoch 42/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0506 - accuracy: 0.9871 - val_loss: 0.1483 - val_accuracy: 0.9549\n","Epoch 43/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0421 - accuracy: 0.9806 - val_loss: 0.1597 - val_accuracy: 0.9398\n","Epoch 44/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0338 - accuracy: 0.9903 - val_loss: 0.1400 - val_accuracy: 0.9474\n","Epoch 45/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0404 - accuracy: 0.9871 - val_loss: 0.1521 - val_accuracy: 0.9474\n","Epoch 46/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0392 - accuracy: 0.9854 - val_loss: 0.1386 - val_accuracy: 0.9549\n","Epoch 47/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0229 - accuracy: 0.9935 - val_loss: 0.1389 - val_accuracy: 0.9474\n","Epoch 48/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0351 - accuracy: 0.9903 - val_loss: 0.1390 - val_accuracy: 0.9549\n","Epoch 49/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0340 - accuracy: 0.9919 - val_loss: 0.1504 - val_accuracy: 0.9398\n","Epoch 50/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0223 - accuracy: 0.9951 - val_loss: 0.1425 - val_accuracy: 0.9624\n","Epoch 51/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0444 - accuracy: 0.9838 - val_loss: 0.1442 - val_accuracy: 0.9474\n","Epoch 52/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0325 - accuracy: 0.9871 - val_loss: 0.1500 - val_accuracy: 0.9549\n","Epoch 53/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0356 - accuracy: 0.9871 - val_loss: 0.1542 - val_accuracy: 0.9624\n","Epoch 54/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0233 - accuracy: 0.9951 - val_loss: 0.1520 - val_accuracy: 0.9398\n","Epoch 55/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0300 - accuracy: 0.9903 - val_loss: 0.1532 - val_accuracy: 0.9474\n","Epoch 56/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0314 - accuracy: 0.9903 - val_loss: 0.1832 - val_accuracy: 0.9549\n","Epoch 57/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0345 - accuracy: 0.9887 - val_loss: 0.1748 - val_accuracy: 0.9474\n","Epoch 58/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0276 - accuracy: 0.9935 - val_loss: 0.1543 - val_accuracy: 0.9549\n","Epoch 59/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0292 - accuracy: 0.9919 - val_loss: 0.1716 - val_accuracy: 0.9549\n","Epoch 60/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0262 - accuracy: 0.9903 - val_loss: 0.1477 - val_accuracy: 0.9549\n","Epoch 61/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0279 - accuracy: 0.9935 - val_loss: 0.1526 - val_accuracy: 0.9549\n","Epoch 62/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0247 - accuracy: 0.9919 - val_loss: 0.1643 - val_accuracy: 0.9549\n","Epoch 63/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0230 - accuracy: 0.9951 - val_loss: 0.1789 - val_accuracy: 0.9549\n","Epoch 64/300\n","39/39 [==============================] - 0s 2ms/step - loss: 0.0201 - accuracy: 0.9935 - val_loss: 0.1647 - val_accuracy: 0.9549\n","Epoch 65/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0208 - accuracy: 0.9903 - val_loss: 0.1581 - val_accuracy: 0.9549\n","Epoch 66/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0178 - accuracy: 0.9951 - val_loss: 0.1754 - val_accuracy: 0.9549\n","Epoch 67/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0319 - accuracy: 0.9887 - val_loss: 0.1691 - val_accuracy: 0.9549\n","Epoch 68/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0173 - accuracy: 0.9968 - val_loss: 0.1594 - val_accuracy: 0.9549\n","Epoch 69/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0236 - accuracy: 0.9903 - val_loss: 0.1777 - val_accuracy: 0.9624\n","Epoch 70/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0270 - accuracy: 0.9935 - val_loss: 0.1669 - val_accuracy: 0.9549\n","Epoch 71/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0174 - accuracy: 0.9968 - val_loss: 0.1670 - val_accuracy: 0.9624\n","Epoch 72/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0201 - accuracy: 0.9935 - val_loss: 0.1771 - val_accuracy: 0.9624\n","Epoch 73/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0131 - accuracy: 0.9984 - val_loss: 0.1839 - val_accuracy: 0.9549\n","Epoch 74/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0176 - accuracy: 0.9951 - val_loss: 0.1792 - val_accuracy: 0.9624\n","Epoch 75/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0150 - accuracy: 0.9951 - val_loss: 0.1813 - val_accuracy: 0.9549\n","Epoch 76/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0239 - accuracy: 0.9903 - val_loss: 0.1721 - val_accuracy: 0.9549\n","Epoch 77/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0093 - accuracy: 0.9984 - val_loss: 0.1704 - val_accuracy: 0.9624\n","Epoch 78/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0148 - accuracy: 0.9984 - val_loss: 0.1686 - val_accuracy: 0.9474\n","Epoch 79/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0245 - accuracy: 0.9887 - val_loss: 0.1735 - val_accuracy: 0.9549\n","Epoch 80/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0226 - accuracy: 0.9903 - val_loss: 0.1925 - val_accuracy: 0.9624\n","Epoch 81/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0183 - accuracy: 0.9903 - val_loss: 0.1896 - val_accuracy: 0.9398\n","Epoch 82/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0263 - accuracy: 0.9935 - val_loss: 0.2027 - val_accuracy: 0.9474\n","Epoch 83/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0173 - accuracy: 0.9935 - val_loss: 0.2168 - val_accuracy: 0.9474\n","Epoch 84/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0065 - accuracy: 0.9984 - val_loss: 0.2199 - val_accuracy: 0.9474\n","Epoch 85/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0149 - accuracy: 0.9903 - val_loss: 0.2094 - val_accuracy: 0.9549\n","Epoch 86/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0093 - accuracy: 0.9968 - val_loss: 0.2079 - val_accuracy: 0.9474\n","Epoch 87/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0191 - accuracy: 0.9968 - val_loss: 0.2017 - val_accuracy: 0.9549\n","Epoch 88/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0183 - accuracy: 0.9935 - val_loss: 0.2159 - val_accuracy: 0.9474\n","Epoch 89/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0074 - accuracy: 0.9984 - val_loss: 0.2226 - val_accuracy: 0.9398\n","Epoch 90/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0251 - accuracy: 0.9903 - val_loss: 0.2192 - val_accuracy: 0.9474\n","Epoch 91/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0125 - accuracy: 0.9984 - val_loss: 0.2142 - val_accuracy: 0.9549\n","Epoch 92/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0127 - accuracy: 0.9935 - val_loss: 0.2026 - val_accuracy: 0.9474\n","Epoch 93/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0115 - accuracy: 0.9951 - val_loss: 0.2090 - val_accuracy: 0.9474\n","Epoch 94/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0125 - accuracy: 0.9951 - val_loss: 0.2199 - val_accuracy: 0.9398\n","Epoch 95/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0236 - accuracy: 0.9887 - val_loss: 0.2195 - val_accuracy: 0.9474\n","Epoch 96/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0070 - accuracy: 0.9984 - val_loss: 0.2207 - val_accuracy: 0.9474\n","Epoch 97/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0119 - accuracy: 0.9951 - val_loss: 0.2394 - val_accuracy: 0.9474\n","Epoch 98/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0092 - accuracy: 0.9984 - val_loss: 0.2309 - val_accuracy: 0.9474\n","Epoch 99/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0119 - accuracy: 0.9984 - val_loss: 0.2221 - val_accuracy: 0.9549\n","Epoch 100/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0126 - accuracy: 0.9968 - val_loss: 0.2254 - val_accuracy: 0.9474\n","Epoch 101/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0149 - accuracy: 0.9935 - val_loss: 0.2378 - val_accuracy: 0.9549\n","Epoch 102/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0114 - accuracy: 0.9951 - val_loss: 0.2434 - val_accuracy: 0.9398\n","Epoch 103/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0135 - accuracy: 0.9951 - val_loss: 0.2521 - val_accuracy: 0.9474\n","Epoch 104/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0094 - accuracy: 0.9968 - val_loss: 0.2561 - val_accuracy: 0.9474\n","Epoch 105/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0126 - accuracy: 0.9935 - val_loss: 0.2643 - val_accuracy: 0.9398\n","Epoch 106/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0117 - accuracy: 0.9968 - val_loss: 0.2527 - val_accuracy: 0.9474\n","Epoch 107/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0060 - accuracy: 0.9984 - val_loss: 0.2556 - val_accuracy: 0.9398\n","Epoch 108/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0067 - accuracy: 0.9984 - val_loss: 0.2939 - val_accuracy: 0.9323\n","Epoch 109/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0104 - accuracy: 0.9984 - val_loss: 0.2573 - val_accuracy: 0.9398\n","Epoch 110/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0144 - accuracy: 0.9951 - val_loss: 0.2495 - val_accuracy: 0.9398\n","Epoch 111/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0044 - accuracy: 1.0000 - val_loss: 0.2651 - val_accuracy: 0.9398\n","Epoch 112/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0177 - accuracy: 0.9919 - val_loss: 0.2939 - val_accuracy: 0.9323\n","Epoch 113/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0085 - accuracy: 0.9968 - val_loss: 0.2839 - val_accuracy: 0.9323\n","Epoch 114/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0072 - accuracy: 0.9984 - val_loss: 0.2745 - val_accuracy: 0.9398\n","Epoch 115/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0085 - accuracy: 0.9968 - val_loss: 0.2611 - val_accuracy: 0.9474\n","Epoch 116/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0074 - accuracy: 0.9984 - val_loss: 0.2531 - val_accuracy: 0.9474\n","Epoch 117/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0046 - accuracy: 1.0000 - val_loss: 0.2660 - val_accuracy: 0.9474\n","Epoch 118/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0088 - accuracy: 0.9984 - val_loss: 0.2700 - val_accuracy: 0.9398\n","Epoch 119/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0068 - accuracy: 0.9984 - val_loss: 0.2772 - val_accuracy: 0.9398\n","Epoch 120/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0046 - accuracy: 1.0000 - val_loss: 0.2754 - val_accuracy: 0.9398\n","Epoch 121/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0117 - accuracy: 0.9968 - val_loss: 0.2885 - val_accuracy: 0.9474\n","Epoch 122/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0081 - accuracy: 0.9968 - val_loss: 0.3165 - val_accuracy: 0.9398\n","Epoch 123/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0085 - accuracy: 0.9968 - val_loss: 0.2864 - val_accuracy: 0.9549\n","Epoch 124/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0048 - accuracy: 0.9984 - val_loss: 0.2950 - val_accuracy: 0.9398\n","Epoch 125/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0043 - accuracy: 0.9984 - val_loss: 0.3055 - val_accuracy: 0.9398\n","Epoch 126/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0308 - accuracy: 0.9919 - val_loss: 0.2940 - val_accuracy: 0.9398\n","Epoch 127/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0149 - accuracy: 0.9903 - val_loss: 0.2638 - val_accuracy: 0.9549\n","Epoch 128/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0148 - accuracy: 0.9968 - val_loss: 0.2680 - val_accuracy: 0.9474\n","Epoch 129/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0219 - accuracy: 0.9951 - val_loss: 0.2845 - val_accuracy: 0.9549\n","Epoch 130/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0139 - accuracy: 0.9935 - val_loss: 0.2817 - val_accuracy: 0.9549\n","Epoch 131/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0161 - accuracy: 0.9935 - val_loss: 0.3002 - val_accuracy: 0.9398\n","Epoch 132/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0231 - accuracy: 0.9935 - val_loss: 0.2750 - val_accuracy: 0.9474\n","Epoch 133/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0079 - accuracy: 0.9984 - val_loss: 0.2749 - val_accuracy: 0.9549\n","Epoch 134/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0087 - accuracy: 0.9968 - val_loss: 0.2711 - val_accuracy: 0.9398\n","Epoch 135/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0098 - accuracy: 0.9951 - val_loss: 0.2775 - val_accuracy: 0.9549\n","Epoch 136/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0083 - accuracy: 0.9968 - val_loss: 0.2780 - val_accuracy: 0.9624\n","Epoch 137/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0204 - accuracy: 0.9951 - val_loss: 0.2842 - val_accuracy: 0.9474\n","Epoch 138/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0101 - accuracy: 0.9968 - val_loss: 0.2831 - val_accuracy: 0.9398\n","Epoch 139/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0083 - accuracy: 0.9968 - val_loss: 0.3035 - val_accuracy: 0.9323\n","Epoch 140/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0112 - accuracy: 0.9951 - val_loss: 0.3099 - val_accuracy: 0.9398\n","Epoch 141/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0145 - accuracy: 0.9935 - val_loss: 0.3291 - val_accuracy: 0.9323\n","Epoch 142/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0187 - accuracy: 0.9935 - val_loss: 0.3236 - val_accuracy: 0.9398\n","Epoch 143/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0078 - accuracy: 0.9951 - val_loss: 0.3033 - val_accuracy: 0.9398\n","Epoch 144/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0065 - accuracy: 0.9984 - val_loss: 0.3024 - val_accuracy: 0.9398\n","Epoch 145/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0105 - accuracy: 0.9951 - val_loss: 0.3134 - val_accuracy: 0.9398\n","Epoch 146/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0120 - accuracy: 0.9968 - val_loss: 0.2719 - val_accuracy: 0.9549\n","Epoch 147/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0119 - accuracy: 0.9935 - val_loss: 0.2905 - val_accuracy: 0.9398\n","Epoch 148/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0028 - accuracy: 1.0000 - val_loss: 0.2699 - val_accuracy: 0.9398\n","Epoch 149/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0046 - accuracy: 1.0000 - val_loss: 0.2657 - val_accuracy: 0.9398\n","Epoch 150/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0094 - accuracy: 0.9968 - val_loss: 0.2906 - val_accuracy: 0.9549\n","Epoch 151/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0070 - accuracy: 0.9984 - val_loss: 0.2676 - val_accuracy: 0.9549\n","Epoch 152/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0035 - accuracy: 1.0000 - val_loss: 0.2864 - val_accuracy: 0.9474\n","Epoch 153/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0050 - accuracy: 0.9984 - val_loss: 0.2902 - val_accuracy: 0.9549\n","Epoch 154/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0035 - accuracy: 1.0000 - val_loss: 0.3020 - val_accuracy: 0.9474\n","Epoch 155/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0026 - accuracy: 1.0000 - val_loss: 0.3084 - val_accuracy: 0.9474\n","Epoch 156/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0121 - accuracy: 0.9951 - val_loss: 0.3063 - val_accuracy: 0.9398\n","Epoch 157/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0066 - accuracy: 0.9984 - val_loss: 0.3052 - val_accuracy: 0.9549\n","Epoch 158/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0024 - accuracy: 1.0000 - val_loss: 0.3079 - val_accuracy: 0.9474\n","Epoch 159/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0043 - accuracy: 1.0000 - val_loss: 0.3012 - val_accuracy: 0.9398\n","Epoch 160/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0332 - accuracy: 0.9887 - val_loss: 0.3121 - val_accuracy: 0.9624\n","Epoch 161/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0069 - accuracy: 0.9984 - val_loss: 0.2962 - val_accuracy: 0.9549\n","Epoch 162/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0027 - accuracy: 1.0000 - val_loss: 0.3220 - val_accuracy: 0.9474\n","Epoch 163/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0126 - accuracy: 0.9968 - val_loss: 0.3015 - val_accuracy: 0.9474\n","Epoch 164/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0095 - accuracy: 0.9968 - val_loss: 0.2839 - val_accuracy: 0.9474\n","Epoch 165/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0067 - accuracy: 0.9968 - val_loss: 0.2908 - val_accuracy: 0.9474\n","Epoch 166/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0060 - accuracy: 0.9984 - val_loss: 0.3028 - val_accuracy: 0.9474\n","Epoch 167/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0029 - accuracy: 1.0000 - val_loss: 0.3054 - val_accuracy: 0.9474\n","Epoch 168/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0025 - accuracy: 1.0000 - val_loss: 0.3148 - val_accuracy: 0.9398\n","Epoch 169/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0034 - accuracy: 1.0000 - val_loss: 0.3185 - val_accuracy: 0.9474\n","Epoch 170/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0040 - accuracy: 0.9984 - val_loss: 0.3343 - val_accuracy: 0.9398\n","Epoch 171/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0026 - accuracy: 1.0000 - val_loss: 0.3268 - val_accuracy: 0.9474\n","Epoch 172/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0051 - accuracy: 0.9984 - val_loss: 0.3084 - val_accuracy: 0.9474\n","Epoch 173/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0135 - accuracy: 0.9951 - val_loss: 0.2862 - val_accuracy: 0.9549\n","Epoch 174/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0033 - accuracy: 0.9984 - val_loss: 0.2915 - val_accuracy: 0.9549\n","Epoch 175/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0111 - accuracy: 0.9951 - val_loss: 0.3019 - val_accuracy: 0.9549\n","Epoch 176/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0152 - accuracy: 0.9968 - val_loss: 0.3114 - val_accuracy: 0.9549\n","Epoch 177/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0084 - accuracy: 0.9968 - val_loss: 0.3067 - val_accuracy: 0.9549\n","Epoch 178/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0166 - accuracy: 0.9951 - val_loss: 0.2932 - val_accuracy: 0.9549\n","Epoch 179/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0071 - accuracy: 0.9968 - val_loss: 0.2807 - val_accuracy: 0.9474\n","Epoch 180/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0179 - accuracy: 0.9951 - val_loss: 0.2718 - val_accuracy: 0.9549\n","Epoch 181/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0191 - accuracy: 0.9968 - val_loss: 0.3027 - val_accuracy: 0.9474\n","Epoch 182/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0136 - accuracy: 0.9951 - val_loss: 0.2955 - val_accuracy: 0.9549\n","Epoch 183/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0167 - accuracy: 0.9935 - val_loss: 0.2919 - val_accuracy: 0.9549\n","Epoch 184/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0119 - accuracy: 0.9968 - val_loss: 0.2894 - val_accuracy: 0.9549\n","Epoch 185/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0091 - accuracy: 0.9984 - val_loss: 0.2712 - val_accuracy: 0.9624\n","Epoch 186/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0024 - accuracy: 1.0000 - val_loss: 0.2750 - val_accuracy: 0.9474\n","Epoch 187/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0061 - accuracy: 0.9984 - val_loss: 0.2897 - val_accuracy: 0.9474\n","Epoch 188/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0040 - accuracy: 0.9984 - val_loss: 0.2870 - val_accuracy: 0.9549\n","Epoch 189/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0142 - accuracy: 0.9935 - val_loss: 0.2954 - val_accuracy: 0.9549\n","Epoch 190/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0052 - accuracy: 0.9984 - val_loss: 0.3094 - val_accuracy: 0.9549\n","Epoch 191/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0107 - accuracy: 0.9984 - val_loss: 0.3047 - val_accuracy: 0.9549\n","Epoch 192/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0096 - accuracy: 0.9951 - val_loss: 0.3169 - val_accuracy: 0.9549\n","Epoch 193/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0062 - accuracy: 0.9951 - val_loss: 0.3225 - val_accuracy: 0.9474\n","Epoch 194/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0057 - accuracy: 0.9984 - val_loss: 0.3214 - val_accuracy: 0.9474\n","Epoch 195/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0031 - accuracy: 1.0000 - val_loss: 0.3194 - val_accuracy: 0.9474\n","Epoch 196/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0206 - accuracy: 0.9935 - val_loss: 0.2991 - val_accuracy: 0.9549\n","Epoch 197/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0125 - accuracy: 0.9951 - val_loss: 0.2898 - val_accuracy: 0.9549\n","Epoch 198/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0049 - accuracy: 0.9984 - val_loss: 0.2984 - val_accuracy: 0.9549\n","Epoch 199/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0087 - accuracy: 0.9968 - val_loss: 0.3148 - val_accuracy: 0.9549\n","Epoch 200/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0176 - accuracy: 0.9951 - val_loss: 0.3089 - val_accuracy: 0.9549\n","Epoch 201/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0072 - accuracy: 0.9984 - val_loss: 0.3015 - val_accuracy: 0.9474\n","Epoch 202/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0141 - accuracy: 0.9968 - val_loss: 0.3203 - val_accuracy: 0.9549\n","Epoch 203/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0064 - accuracy: 1.0000 - val_loss: 0.3076 - val_accuracy: 0.9474\n","Epoch 204/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0020 - accuracy: 1.0000 - val_loss: 0.3059 - val_accuracy: 0.9549\n","Epoch 205/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0047 - accuracy: 0.9968 - val_loss: 0.3085 - val_accuracy: 0.9474\n","Epoch 206/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0087 - accuracy: 0.9968 - val_loss: 0.3175 - val_accuracy: 0.9474\n","Epoch 207/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0017 - accuracy: 1.0000 - val_loss: 0.3255 - val_accuracy: 0.9474\n","Epoch 208/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0018 - accuracy: 1.0000 - val_loss: 0.3250 - val_accuracy: 0.9474\n","Epoch 209/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0046 - accuracy: 0.9968 - val_loss: 0.3158 - val_accuracy: 0.9549\n","Epoch 210/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0030 - accuracy: 0.9984 - val_loss: 0.3198 - val_accuracy: 0.9474\n","Epoch 211/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0056 - accuracy: 0.9984 - val_loss: 0.3183 - val_accuracy: 0.9474\n","Epoch 212/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0051 - accuracy: 0.9968 - val_loss: 0.3207 - val_accuracy: 0.9474\n","Epoch 213/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0061 - accuracy: 0.9984 - val_loss: 0.3260 - val_accuracy: 0.9549\n","Epoch 214/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0251 - accuracy: 0.9903 - val_loss: 0.3228 - val_accuracy: 0.9549\n","Epoch 215/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0131 - accuracy: 0.9951 - val_loss: 0.3044 - val_accuracy: 0.9474\n","Epoch 216/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0090 - accuracy: 0.9968 - val_loss: 0.3044 - val_accuracy: 0.9549\n","Epoch 217/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0063 - accuracy: 0.9984 - val_loss: 0.3118 - val_accuracy: 0.9549\n","Epoch 218/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0041 - accuracy: 1.0000 - val_loss: 0.3281 - val_accuracy: 0.9549\n","Epoch 219/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0087 - accuracy: 0.9951 - val_loss: 0.3046 - val_accuracy: 0.9474\n","Epoch 220/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0122 - accuracy: 0.9951 - val_loss: 0.3097 - val_accuracy: 0.9549\n","Epoch 221/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0038 - accuracy: 1.0000 - val_loss: 0.3010 - val_accuracy: 0.9474\n","Epoch 222/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0070 - accuracy: 0.9951 - val_loss: 0.3324 - val_accuracy: 0.9474\n","Epoch 223/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0029 - accuracy: 1.0000 - val_loss: 0.3340 - val_accuracy: 0.9474\n","Epoch 224/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0047 - accuracy: 0.9984 - val_loss: 0.3152 - val_accuracy: 0.9549\n","Epoch 225/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0074 - accuracy: 0.9984 - val_loss: 0.3226 - val_accuracy: 0.9549\n","Epoch 226/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0035 - accuracy: 0.9984 - val_loss: 0.3436 - val_accuracy: 0.9474\n","Epoch 227/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0094 - accuracy: 0.9968 - val_loss: 0.3222 - val_accuracy: 0.9549\n","Epoch 228/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0041 - accuracy: 0.9984 - val_loss: 0.3464 - val_accuracy: 0.9474\n","Epoch 229/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0032 - accuracy: 0.9984 - val_loss: 0.3295 - val_accuracy: 0.9549\n","Epoch 230/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0097 - accuracy: 0.9968 - val_loss: 0.3418 - val_accuracy: 0.9398\n","Epoch 231/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0060 - accuracy: 0.9984 - val_loss: 0.3564 - val_accuracy: 0.9549\n","Epoch 232/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0022 - accuracy: 1.0000 - val_loss: 0.3608 - val_accuracy: 0.9474\n","Epoch 233/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0039 - accuracy: 0.9984 - val_loss: 0.3606 - val_accuracy: 0.9474\n","Epoch 234/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0064 - accuracy: 0.9968 - val_loss: 0.4038 - val_accuracy: 0.9398\n","Epoch 235/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0183 - accuracy: 0.9935 - val_loss: 0.3999 - val_accuracy: 0.9398\n","Epoch 236/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0036 - accuracy: 0.9984 - val_loss: 0.3487 - val_accuracy: 0.9474\n","Epoch 237/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0065 - accuracy: 0.9984 - val_loss: 0.3484 - val_accuracy: 0.9398\n","Epoch 238/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0039 - accuracy: 0.9984 - val_loss: 0.3286 - val_accuracy: 0.9549\n","Epoch 239/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0022 - accuracy: 1.0000 - val_loss: 0.3294 - val_accuracy: 0.9549\n","Epoch 240/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0033 - accuracy: 1.0000 - val_loss: 0.3559 - val_accuracy: 0.9549\n","Epoch 241/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0104 - accuracy: 0.9968 - val_loss: 0.3943 - val_accuracy: 0.9549\n","Epoch 242/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0015 - accuracy: 1.0000 - val_loss: 0.3895 - val_accuracy: 0.9549\n","Epoch 243/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0015 - accuracy: 1.0000 - val_loss: 0.3866 - val_accuracy: 0.9549\n","Epoch 244/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0059 - accuracy: 0.9984 - val_loss: 0.3897 - val_accuracy: 0.9474\n","Epoch 245/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0014 - accuracy: 1.0000 - val_loss: 0.3953 - val_accuracy: 0.9398\n","Epoch 246/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0021 - accuracy: 1.0000 - val_loss: 0.4092 - val_accuracy: 0.9398\n","Epoch 247/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0013 - accuracy: 1.0000 - val_loss: 0.4098 - val_accuracy: 0.9398\n","Epoch 248/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0049 - accuracy: 0.9968 - val_loss: 0.3650 - val_accuracy: 0.9398\n","Epoch 249/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0066 - accuracy: 0.9968 - val_loss: 0.3542 - val_accuracy: 0.9474\n","Epoch 250/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0087 - accuracy: 0.9968 - val_loss: 0.3567 - val_accuracy: 0.9398\n","Epoch 251/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0062 - accuracy: 0.9968 - val_loss: 0.3945 - val_accuracy: 0.9398\n","Epoch 252/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0046 - accuracy: 0.9968 - val_loss: 0.3964 - val_accuracy: 0.9474\n","Epoch 253/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0036 - accuracy: 0.9984 - val_loss: 0.3767 - val_accuracy: 0.9398\n","Epoch 254/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0019 - accuracy: 0.9984 - val_loss: 0.3523 - val_accuracy: 0.9474\n","Epoch 255/300\n","39/39 [==============================] - 0s 3ms/step - loss: 7.8615e-04 - accuracy: 1.0000 - val_loss: 0.3638 - val_accuracy: 0.9474\n","Epoch 256/300\n","39/39 [==============================] - 0s 3ms/step - loss: 9.6698e-04 - accuracy: 1.0000 - val_loss: 0.3634 - val_accuracy: 0.9474\n","Epoch 257/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0027 - accuracy: 0.9984 - val_loss: 0.3570 - val_accuracy: 0.9398\n","Epoch 258/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0017 - accuracy: 1.0000 - val_loss: 0.3798 - val_accuracy: 0.9474\n","Epoch 259/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0016 - accuracy: 1.0000 - val_loss: 0.3852 - val_accuracy: 0.9398\n","Epoch 260/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0043 - accuracy: 1.0000 - val_loss: 0.4283 - val_accuracy: 0.9474\n","Epoch 261/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0015 - accuracy: 1.0000 - val_loss: 0.4182 - val_accuracy: 0.9398\n","Epoch 262/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0033 - accuracy: 0.9984 - val_loss: 0.3989 - val_accuracy: 0.9398\n","Epoch 263/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0029 - accuracy: 0.9984 - val_loss: 0.3707 - val_accuracy: 0.9474\n","Epoch 264/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0019 - accuracy: 1.0000 - val_loss: 0.3479 - val_accuracy: 0.9474\n","Epoch 265/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0010 - accuracy: 1.0000 - val_loss: 0.3712 - val_accuracy: 0.9474\n","Epoch 266/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0041 - accuracy: 0.9984 - val_loss: 0.3743 - val_accuracy: 0.9398\n","Epoch 267/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0109 - accuracy: 0.9984 - val_loss: 0.3404 - val_accuracy: 0.9474\n","Epoch 268/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0058 - accuracy: 0.9968 - val_loss: 0.3717 - val_accuracy: 0.9398\n","Epoch 269/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0070 - accuracy: 0.9984 - val_loss: 0.3842 - val_accuracy: 0.9474\n","Epoch 270/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0021 - accuracy: 1.0000 - val_loss: 0.3697 - val_accuracy: 0.9398\n","Epoch 271/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0020 - accuracy: 1.0000 - val_loss: 0.3887 - val_accuracy: 0.9398\n","Epoch 272/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0020 - accuracy: 1.0000 - val_loss: 0.3954 - val_accuracy: 0.9398\n","Epoch 273/300\n","39/39 [==============================] - 0s 3ms/step - loss: 7.0710e-04 - accuracy: 1.0000 - val_loss: 0.3964 - val_accuracy: 0.9398\n","Epoch 274/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0044 - accuracy: 0.9984 - val_loss: 0.4138 - val_accuracy: 0.9398\n","Epoch 275/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0236 - accuracy: 0.9951 - val_loss: 0.4198 - val_accuracy: 0.9398\n","Epoch 276/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0026 - accuracy: 1.0000 - val_loss: 0.4234 - val_accuracy: 0.9474\n","Epoch 277/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0072 - accuracy: 0.9968 - val_loss: 0.4598 - val_accuracy: 0.9474\n","Epoch 278/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0027 - accuracy: 1.0000 - val_loss: 0.4351 - val_accuracy: 0.9474\n","Epoch 279/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0029 - accuracy: 0.9984 - val_loss: 0.4475 - val_accuracy: 0.9398\n","Epoch 280/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0016 - accuracy: 1.0000 - val_loss: 0.4472 - val_accuracy: 0.9474\n","Epoch 281/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0029 - accuracy: 1.0000 - val_loss: 0.4383 - val_accuracy: 0.9474\n","Epoch 282/300\n","39/39 [==============================] - 0s 3ms/step - loss: 9.1132e-04 - accuracy: 1.0000 - val_loss: 0.4396 - val_accuracy: 0.9474\n","Epoch 283/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0029 - accuracy: 1.0000 - val_loss: 0.4205 - val_accuracy: 0.9474\n","Epoch 284/300\n","39/39 [==============================] - 0s 3ms/step - loss: 8.5333e-04 - accuracy: 1.0000 - val_loss: 0.4220 - val_accuracy: 0.9474\n","Epoch 285/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0171 - accuracy: 0.9919 - val_loss: 0.4852 - val_accuracy: 0.9398\n","Epoch 286/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0034 - accuracy: 1.0000 - val_loss: 0.4149 - val_accuracy: 0.9549\n","Epoch 287/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0073 - accuracy: 0.9968 - val_loss: 0.4388 - val_accuracy: 0.9474\n","Epoch 288/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0072 - accuracy: 0.9968 - val_loss: 0.4277 - val_accuracy: 0.9549\n","Epoch 289/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0091 - accuracy: 0.9968 - val_loss: 0.4590 - val_accuracy: 0.9398\n","Epoch 290/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0082 - accuracy: 0.9968 - val_loss: 0.4540 - val_accuracy: 0.9398\n","Epoch 291/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0063 - accuracy: 0.9984 - val_loss: 0.4305 - val_accuracy: 0.9323\n","Epoch 292/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0149 - accuracy: 0.9935 - val_loss: 0.4351 - val_accuracy: 0.9323\n","Epoch 293/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0023 - accuracy: 0.9984 - val_loss: 0.4088 - val_accuracy: 0.9549\n","Epoch 294/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0051 - accuracy: 0.9984 - val_loss: 0.4100 - val_accuracy: 0.9474\n","Epoch 295/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0040 - accuracy: 0.9984 - val_loss: 0.4261 - val_accuracy: 0.9323\n","Epoch 296/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0021 - accuracy: 1.0000 - val_loss: 0.4462 - val_accuracy: 0.9323\n","Epoch 297/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0081 - accuracy: 0.9951 - val_loss: 0.4730 - val_accuracy: 0.9474\n","Epoch 298/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0082 - accuracy: 0.9968 - val_loss: 0.4185 - val_accuracy: 0.9474\n","Epoch 299/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0018 - accuracy: 1.0000 - val_loss: 0.4140 - val_accuracy: 0.9549\n","Epoch 300/300\n","39/39 [==============================] - 0s 3ms/step - loss: 0.0097 - accuracy: 0.9968 - val_loss: 0.4161 - val_accuracy: 0.9549\n"]}]},{"cell_type":"code","source":["print(\"Evaluate on test data\")\n","results = model.evaluate(X_test, y_test, batch_size=16)\n","print(\"test loss, test acc:\", results)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YOyDDFql4YkD","executionInfo":{"status":"ok","timestamp":1654018211115,"user_tz":-420,"elapsed":381,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"a589cc6a-a1de-4cd6-e305-930f0de7f0d8"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Evaluate on test data\n","9/9 [==============================] - 0s 2ms/step - loss: 0.3024 - accuracy: 0.9697\n","test loss, test acc: [0.3023700714111328, 0.9696969985961914]\n"]}]},{"cell_type":"code","source":["# test the model prediction\n","\n","for file in glob.glob(not_situp_folder)[:3]:\n","    image = cv2.imread(file)\n","    keypoints = processPose(image).flatten().reshape(1, 51)\n","    predd = model.predict(keypoints)\n","    posee = np.argmax(predd)\n","    confidence = predd[0][posee]\n","    print(predd)\n","    print(posee)\n","    print(confidence)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4IVTqFkMECuG","executionInfo":{"status":"ok","timestamp":1654018220641,"user_tz":-420,"elapsed":856,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"dc60ac92-fd60-4622-f80e-5cb843f4aedd"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1.0000000e+00 3.5374733e-37]]\n","0\n","1.0\n","[[1.0000000e+00 7.8208757e-31]]\n","0\n","1.0\n","[[1.000000e+00 6.000673e-12]]\n","0\n","1.0\n"]}]},{"cell_type":"code","source":["image = cv2.imread('/content/003_e63ed852-reversed.jpg')\n","keypoints = processPose(image).flatten().reshape(1, 51)\n","predd = model.predict(keypoints)\n","posee = np.argmax(predd)\n","confidence = predd[0][posee]\n","print(predd)\n","print(posee)\n","print(confidence)"],"metadata":{"id":"lj6H-wWOYV7S"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 3. Save The Model"],"metadata":{"id":"rSBstkcD_nva"}},{"cell_type":"code","source":["!pip install pyyaml h5py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mhOe3RvD_sz6","executionInfo":{"status":"ok","timestamp":1654018234014,"user_tz":-420,"elapsed":2974,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"fbd048cc-4382-4361-c2b6-7174b3c4ae1f"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (3.13)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.7/dist-packages (3.1.0)\n","Requirement already satisfied: numpy>=1.14.5 in /usr/local/lib/python3.7/dist-packages (from h5py) (1.21.6)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py) (1.5.2)\n"]}]},{"cell_type":"code","source":["model.save('situp-model-31may22.h5')"],"metadata":{"id":"DdM8p7nWBmDQ","executionInfo":{"status":"ok","timestamp":1654018244383,"user_tz":-420,"elapsed":350,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}}},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":["## 4. Convert to TFlite"],"metadata":{"id":"dUEal5PAiwsW"}},{"cell_type":"code","source":["converter = tf.lite.TFLiteConverter.from_keras_model(model)\n","tflite_model = converter.convert()\n","\n","with open('situp-model-31may22.tflite', 'wb') as f:\n","  f.write(tflite_model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N8bGSSWYi5PH","executionInfo":{"status":"ok","timestamp":1654018257957,"user_tz":-420,"elapsed":7717,"user":{"displayName":"Deandra Setyaputri M2010F1120","userId":"08611358996117971618"}},"outputId":"fc7f26bd-9372-408d-8e3b-5854d631ff02"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["INFO:tensorflow:Assets written to: /tmp/tmp6o6c5tdd/assets\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:Buffer deduplication procedure will be skipped when flatbuffer library is not properly loaded\n"]}]}]}